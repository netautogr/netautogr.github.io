<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Network Automation GR</title>
        <link>https://netautogr.github.io/posts/</link>
        <description>Recent content in Posts on Network Automation GR</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 24 Sep 2021 01:12:57 +0300</lastBuildDate>
        <atom:link href="https://netautogr.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Introduction_to_yang</title>
            <link>https://netautogr.github.io/posts/2021/09/introduction_to_yang/</link>
            <pubDate>Fri, 24 Sep 2021 01:12:57 +0300</pubDate>
            
            <guid>https://netautogr.github.io/posts/2021/09/introduction_to_yang/</guid>
            <description>Γενικά Τί είναι τα YANG data models To YANG (Yet Another Next Generation) είναι γλώσσα μοντελοποίησης. Πολλές φορές όμως χρησιμοποιούμε τον όρο αναφερόμενοι στα ίδια τα μοντέλα, στα δεδομένα τα οποία αναπαριστώνται με βάση αυτά τα μοντέλα ή τη γλώσσα μοντελοποίησης (Yang data modeling language / Yang data models / Yang data).
Κάποια στιγμή, προέκυψε η ανάγκη της δημιουργίας ενός νέου μοντέλου δεδομένων για τη διαχείριση των δικτυακών συσκευών και των λειτουργιών τους, όπου οι πληροφορίες για την κατάσταση και λειτουργικότητα των συσκευών (operational data) θα ήταν ξέχωρα από τις πληροφορίες για τη ρύθμιση τους (configuration data), όπου τα μοντέλα θα ήταν επεκτάσιμα και καλύτερα δομημένα, η μετάδοση θα ήταν ασφαλής (με χρήση κρυπτογράφησης) και αξιόπιστη (over TCP) και η χρήση των καναλιών μεταφοράς βελτιστοποιημένη, δηλαδή ότι δεν ήταν το SNMP και το αντίστοιχο μοντέλο δεδομένων, το SMI.</description>
            <content type="html"><![CDATA[<h1 id="γενικά">Γενικά</h1>
<h2 id="τί-είναι-τα-yang-data-models">Τί είναι τα YANG data models</h2>
<p>To YANG <a href="https://en.wikipedia.org/wiki/YANG">(Yet Another Next Generation)</a> είναι γλώσσα μοντελοποίησης. Πολλές φορές όμως χρησιμοποιούμε τον όρο αναφερόμενοι στα ίδια τα μοντέλα, στα δεδομένα τα οποία αναπαριστώνται με βάση αυτά τα μοντέλα ή τη γλώσσα μοντελοποίησης (Yang data modeling language / Yang data models / Yang data).</p>
<p>Κάποια στιγμή, προέκυψε η ανάγκη της δημιουργίας ενός νέου μοντέλου δεδομένων για τη διαχείριση των δικτυακών συσκευών και των λειτουργιών τους, όπου οι πληροφορίες για την κατάσταση και λειτουργικότητα των συσκευών (operational data) θα ήταν ξέχωρα από τις πληροφορίες για τη ρύθμιση τους (configuration data), όπου τα μοντέλα θα ήταν επεκτάσιμα και καλύτερα δομημένα, η μετάδοση θα ήταν ασφαλής (με χρήση κρυπτογράφησης) και αξιόπιστη (over TCP) και η χρήση των καναλιών μεταφοράς βελτιστοποιημένη, δηλαδή ότι δεν ήταν το SNMP και το αντίστοιχο μοντέλο δεδομένων, το <a href="https://www.iana.org/assignments/smi-numbers/smi-numbers.xhtml">SMI</a>.</p>
<p>To YANG σαν modeling language έδωσε επίσης τη δυνατότητα για δομές όχι αυστηρά δεδροειδείς αλλά με δυνατότητες για εισαγωγή άλλων μοντέλων (π.χ. interface &lt;-&gt; mac address &amp; ipv4 address) με πολλαπλούς τρόπους (π.χ. augmentation/deviation)</p>
<h2 id="χρησιμότητα">Χρησιμότητα</h2>
<h3 id="configoperational">Config/Operational</h3>
<p>Η επικρατούσα αντίληψη είναι πως τα <a href="https://github.com/YangModels/yang">YANG Data models</a> και τα σχετικά εργαλεία και συστατικά χρησιμοποιούνται για το configuration των δικτυακών συσκευών και υπηρεσιών, ενώ για το monitoring της υγείας και απόδοσης συσκευών και λειτουργιών συνεχίζει κανείς να χρησιμοποιεί το SNMP. Η πραγματικότητα είναι πως υπάρχουν μοντέλα YANG τα οποία επιτελούν και το σκοπό της παρακολούθησης και τα οποία συχνά έχουν το επίθεμα <em><strong>oper</strong></em>.</p>
<h3 id="telemetrystreamingonchange">Telemetry/Streaming/OnChange</h3>
<p>Με αυτό το σκεπτικό υπάρχουν αρκετές περιπτώσεις όπου η χρήση model driven παρακολούθησης για το δίκτυο και τις δικτυακές συσκευές έχει σημαντικά πλεονεκτήματα, όπως τη δυνατότητα για αποστολή συνεχών ομάδων μετρήσεων από τις ίδιες τις συσκευές σε συνεχόμενο ρυθμό (streaming telemetry) με ελάχιστη επιβάρυνση της απόδοσης των συσκευών. Επίσης οι ίδιες οι συσκευές μπορούν να ειδοποιούν στέλνοντας δεδομένα Yang μόνο όταν υπάρχει αλλαγή στην κατάσταση της συσκευής (<em>on change</em>). Η επιλογή των δεδομένων για την συνεχόμενη εκπομπή μπορεί να γίνει με τη μέθοδο της εγγραφής συνδρομής (subscription)</p>
<h3 id="απευθείας-προγρααμματική-πρόσβαση-στα-δεδομένα">Απευθείας προγρααμματική πρόσβαση στα δεδομένα</h3>
<p>Ακόμα όμως και εκτός των ορίων του Streaming Telemetry, η δυνατότητα να έχουμε προγραμματική πρόσβαση ανά πάσα στιγμή στις παραμέτρους λειτουργίας του δικτύου χωρίς να μεσολαβεί κάποια μετάφραση (<em>parsing</em> - βλέπετε <a href="https://netautogr.github.io/posts/2021/01/how-to-get-started-with-network-automation/">How to get started with Network Automation</a>) από συνδέσεις κονσόλας μέσω Telnet/SSH, αλλά απευθείας στα δεδομένα που ο κατασκευαστής προέβλεψε να θέσει στη διάθεση μας, είναι μια πολύ μεγάλη ευκολία.
Για την περίπτωση όπου θέλουμε να έχουμε προγραμματική πρόσβαση στη διαμόρφωση των παραμέτρων λειτουργίας του εξοπλισμού, η χρήση YANG Data Models με κατάλληλα πρωτόκολλα επικοινωνίας δίνει πολύ μεγάλη ευελιξία και ακρίβεια.</p>
<h3 id="mdt-vs-snmp">MDT vs SNMP</h3>
<p>Καταρχήν όπως είπαμε η ανάπτυξη στον τομέα του SNMP έχει σταματήσει από τόσο παλιά, που κάνει πραγματικά εντύπωση. Όποιος έχει παρακολουθήσει τις διαλέξεις (<a href="https://www.ciscolive.com/global/on-demand-library.html?search=BRKNMS-2032#/session/1564610718224001cM9p">presentation</a> και <a href="https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKNMS-2032.pdf">pdf</a>) του <a href="https://blogs.cisco.com/author/benoitclaise">Benoit Claise</a> ή έχει διαβάσει το βιβλίο του <a href="https://www.informit.com/store/network-programmability-with-yang-the-structure-of-9780135180396">Network Programmability with YANG: The Structure of Network Automation with YANG, NETCONF, RESTCONF, and gNMI</a> γνωρίζει ότι πρακτικά μετά το 2007 τα πράγματα είχαν εντελώς τελματώσει για το SNMP.</p>
<p>Επίσης όλοι γνωρίζουμε ότι SNMP είναι αρκετά δυσνόητο (ASN.1 notation, SMI tree, MIB imports, κλπ), οι υλοποιήσεις του αρκετά προβληματικές (μεγάλο πρόβλημα με ασυμβατότητα μεταξύ των MIBs) και όσο αφορά την ασφάλεια, δεν είναι τυχαίο που μεγάλος αριθμός συσκευών δεν υποστηρίζει την <em>&ldquo;ασφαλή&rdquo;</em> έκδοση SNMPv3, η οποία έχει πέντε διαφορετικές παραλαγές, όπου κάποιες από αυτές μόνο ασφαλείς δεν είναι. Σαν επισφράγισμα στον <a href="https://youtu.be/McNm_WfQTHw">&ldquo;τάφο&rdquo; του SNMP</a>, πολλοί λίγοι οργανισμοί τολμούν να εφαρμόσουν το συγκεκριμένο πρωτόκολλο και προτιμούν την λιγότερη ασφαλή αλλά <em>&ldquo;απλή&rdquo;</em> και <em>&ldquo;προβλέψιμη&rdquo;</em> έκδοση SNMPv2c.</p>
<p>Αντίθετα οι τρόποι μεταφοράς YANG Data προσφέρουν ασφάλεια δεδομένων κατά τη μεταφορά, τα μοντέλα προβλέπουν θέματα συμβατότητας και ο τρόπος αναπαράστασης είναι κατά πολύ βελτιωμένος σε σχέση με το SNMP.
Παρόλα αυτά, αν κανείς ξεκινήσει να ασχολείται με το YANG δανειζόμενος την οπτική γιγάντων του χώρου όπως ο <a href="https://www.linkedin.com/in/benoit-claise-7534b42/">Benoit Claise</a> και o <a href="https://www.linkedin.com/in/carlmoberg/">Carl Moberg</a> (πρώην <a href="https://www.tail-f.com/">Tail-f</a> / Cisco), μάλλον θα αρχίσει να το ξανασκέφτεται.. Ευτυχώς υπάρχουν και πιο εύκολοι δρόμοι και .. κι εμείς εδώ είμαστε ;)</p>
<h2 id="ιστορικό">Ιστορικό</h2>
<p>Η συζήτηση για την ανεπάρκεια των υπαρχόντων τεχνολογιών ξεκίνησε νωρίς, το 2002 με το <a href="https://datatracker.ietf.org/doc/html/rfc3535">IAB Network Management Workshop</a> το οποίο συμπληρώθηκε και με άλλα κείμενα π.χ. <a href="https://datatracker.ietf.org/doc/html/rfc3444">On the Difference between Information Models and Data Models</a>. Στη συνέχεια πρώτα καθορίστηκε ένα πρωτόκολλο για τη μεταφορά δεδομένων, το <a href="https://datatracker.ietf.org/doc/html/rfc4741">Netconf</a> το 2006 με την RFC4741, η οποία έγινε obsolete από την <a href="https://datatracker.ietf.org/doc/html/rfc6241">RFC6241</a> το 2011.</p>
<p>Στη συνέχεια προέκυψε η προδιαγραφή για τη γλώσσα YANG:<a href="https://datatracker.ietf.org/doc/html/rfc6020">YANG - A Data Modeling Language for the Network Configuration Protocol (NETCONF)</a> το 2010 και με τα χρόνια και τα σχετικά συστατικά της π.χ. <a href="https://datatracker.ietf.org/doc/html/rfc6991">Common YANG Data Types</a> και <a href="https://datatracker.ietf.org/doc/html/rfc8340">YANG Tree Diagrams</a>, ενώ το πρωτόκολλο <a href="https://datatracker.ietf.org/doc/html/rfc8040">RESTCONF</a> άργησε να καθοριστεί.
Στην πορεία αυτή βλέπει κανείς να συνδράμουν σημαντικά τόσο ακαδημαϊκά ιδρύματα αλλά και εταιρείες που έβαλαν τα θεμέλια για τις δυνατότητες και τη χρήση των YANG Models σήμερα, π.χ. Tail-f systems, Juniper, κλπ.
Ένα κρίσιμο σημείο είναι ότι η πορεία ανάπτυξης του SNMP σταμάτησε αρκετά νωρίς (περίπου το 2007), οι vendors δεν ανέπτυσαν πλέον τις MIB τους και έτσι σιγά εγκαταλείφθηκε η επένδυση σε αυτό το μοντέλο διαχείρισης και δόθηκε βάρος σε μοντέλα και τεχνολογίες όπως τα Yang Data Models.</p>
<p>Υπάρχουν πληθώρα δεδομένων και βιβλίων γύρω τόσο από το ιστορικό όσο και από την τεχνολογία και τη χρήση της αλλά το reference πάνω στη χρήση της YANG στο Network Programmability αποτελεί το βιβλίο των Benoit Claise, Joe Clarke &amp; Jan Lindblad: <a href="https://www.informit.com/store/network-programmability-with-yang-the-structure-of-9780135180396">Network Programmability with YANG: The Structure of Network Automation with YANG, NETCONF, RESTCONF, and gNMI</a></p>
<h1 id="είδη-μοντέλων">Είδη μοντέλων</h1>
<h2 id="open-models">Open Models</h2>
<p>Τα Open models είναι ανεξάρτητα από συγκεκριμένους vendors και αναπαριστούν τις παραμέτρους λειτουργίας των δικτυακών συσκευών σύμφωνα με όσα ορίζουν οργανισμοί με ανοικτά standards. Τέτοιοι οργανισμοί είναι το IETF και το OpenConfig. Προφανώς αφορούν λειτουργίες οι οποίες είναι κοινές σε δικτυακές συσκευές διαφορετικών κατασκευαστών, όπως τα πρωτόκολλα routing π.χ. ospf, οι ιδιότητες βασικών στοιχείων των συσκευών, π.χ. interfaces κλπ. To <a href="https://www.ietf.org/">IETF</a> δεν χρειάζεται ιδιαίτερες συστάσεις (ή δεν θα έπρεπε). To <a href="https://www.openconfig.net/">OpenConfig</a> είναι οργανισμός στον οποίο συμμετέχουν <a href="https://www.openconfig.net/about/participants/">αρκετοί vendors</a> στην προσπάθεια να δημιουργηθεί κάτι κοινό που προσαρμόζεται γρηγορότερα στις εξελίξεις.</p>
<h2 id="native-models">Native Models</h2>
<p>Τα Native Models είναι αυτά που ορίζονται από τους ίδιους τους vendors ανά μοντέλο/κατηγορία συσκευής και λειτουργικό σύστημα (π.χ. Cisco IOS-XE/17.3.1 - <a href="https://github.com/YangModels/yang/tree/master/vendor/cisco/xe/1731">https://github.com/YangModels/yang/tree/master/vendor/cisco/xe/1731</a>)</p>
<h1 id="δομή">Δομή</h1>
<h2 id="yang-modules--submodules">Yang Modules &amp; Submodules</h2>
<p>Τα Yang data models ορίζουν ομάδες δεδομένων που αναπαριστούν πλήρως ένα μοντέλο χρησιμοποιώντας modules και submodules. Ένα module αναπαριστά και ορίζει πλήρως ένα μόνο μοντέλο, ωστόσο μπορεί να εισάγει (<em>import</em>) εξωτερικά modules, να συμπεριλάβει (<em>include</em>) ένα ή περισσότερα submodules, να επεκτείνει ένα model (<em>augment</em>) ή να καθορίσει που οι προδιαγραφές του αποκλίνουν (<em>deviation</em>) από ένα μοντέλο.
Ένα module ορίζεται από ένα μοναδικό XML namespace (xmlns). Τα submodules είναι ενότητες στις οποίες μπορεί να διαιρεθεί ένα module για καλύτερη οργάνωση.</p>
<h2 id="yang-node-types">Yang Node Types</h2>
<p>Ανάλογα με τον τρόπο οργάνωσης και αναπάραστασης της πληροφορίας σε ένα μοντέλο, ορίζονται οι παρακάτω τύποι:</p>
<ul>
<li>container: Ένα subset από δεδομένα που μπορούν να είναι ανόμοια ως προς τον τύπο τους και ομαδοποιούνται για οργανωτικούς λόγους. Ένα container δεν διαθέτει data type.</li>
</ul>
<pre><code class="language-yang" data-lang="yang">container system {
    container login {
        leaf message {
            type string;
            description
                &quot;Message given at start of login session&quot;;
        }
    }
}
</code></pre><ul>
<li>list: Μια ομάδα από δεδομένα του ίδιου τύπου (μπορεί να είναι και ένα άλλο μοντέλο που εισάγεται σε αυτό που εξετάζουμε) και για την οργάνωση των οποίων και την απευθείας πρόσβαση σε συγκεκριμένα από αυτά, ορίζονται πεδία - κλειδιά.</li>
<li>key: Τα παραπάνω αναφερόμενα πεδία - κλειδιά, π.χ. το όνομα ενός δικτυακού interface. Μία λίστα μπορεί να έχει παραπάνω από ένα πεδίο κλειδί, και για την απευθείας πρόσβαση σε συγκεκριμένα δεδομένα, ανάλογα με την περίπτωση, πρέπει κανείς να ορίζει ή όλα τα κλειδιά ή κάποια από αυτά.</li>
</ul>
<pre><code class="language-yang" data-lang="yang">list user {
    key &quot;name&quot;;
    leaf name {
        type string;
    }
    leaf full-name {
        type string;
    }
    leaf class {
        type string;
    }
}
</code></pre><ul>
<li>leaf: Ένα απλό πεδίο όπου ορίζεται μια τιμή για το μοντέλο. Κάθε leaf συνήθως έχει συγκεκριμένο τύπο δεδομένων ενώ μπορεί να ορίζει και κανόνες για το πότε είναι σωστά τα δεδομένα που θέλει κάποιος να αποθηκεύσει σε αυτό (<em>Data Validation</em>).</li>
</ul>
<pre><code class="language-yang" data-lang="yang">leaf host-name {
    type string;
    description &quot;Hostname for this system&quot;;
}
</code></pre><h2 id="grouping">Grouping</h2>
<p>Ομάδες δεδομένων που μπορούν να επαναχρησιμοποιηθούν εντός του μοντέλου με το πρόθεμα <em>uses</em>.</p>
<pre><code class="language-yang" data-lang="yang">grouping target {
    leaf address {
        type inet:ip-address;
        description &quot;Target IP address&quot;;
    }
    leaf port {
        type inet:port-number;
        description &quot;Target port number&quot;;
    }
}
container peer {
    container destination {
        uses target;
    }
}
</code></pre><h2 id="data-types--validation">Data types &amp; Validation</h2>
<h2 id="built-in-data-types">Built-in Data Types</h2>
<p>Όπως και σε άλλες γλώσσες έτσι και στην Yang είναι ορισμένοι ενσωματωμένοι τύποι δεδoμένων.
Τα παρακάτω ορίζονται στο documentation: <a href="https://datatracker.ietf.org/doc/html/rfc6991">Common YANG Data Types</a></p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>binary</td>
<td>Text</td>
<td>Any binary data</td>
</tr>
<tr>
<td>bits</td>
<td>Text/Number</td>
<td>A set of bits or flags</td>
</tr>
<tr>
<td>boolean</td>
<td>Text</td>
<td>&ldquo;true&rdquo; or &ldquo;false&rdquo;</td>
</tr>
<tr>
<td>decimal64</td>
<td>Number</td>
<td>64-bit fixed point real number</td>
</tr>
<tr>
<td>empty</td>
<td>Empty</td>
<td>A leaf that does not have any value</td>
</tr>
<tr>
<td>enumeration</td>
<td>Text/Number</td>
<td>Enumerated strings with associated numeric values</td>
</tr>
<tr>
<td>identityref</td>
<td>Text</td>
<td>A reference to an abstract identity</td>
</tr>
<tr>
<td>instance-identifier</td>
<td>Text</td>
<td>References a data tree node</td>
</tr>
<tr>
<td>int8</td>
<td>Number</td>
<td>8-bit signed integer</td>
</tr>
<tr>
<td>int16</td>
<td>Number</td>
<td>16-bit signed integer</td>
</tr>
<tr>
<td>int32</td>
<td>Number</td>
<td>32-bit signed integer</td>
</tr>
<tr>
<td>int64</td>
<td>Number</td>
<td>64-bit signed integer</td>
</tr>
<tr>
<td>leafref</td>
<td>Text/Number</td>
<td>A reference to a leaf instance</td>
</tr>
<tr>
<td>string</td>
<td>Text</td>
<td>Human readable string</td>
</tr>
<tr>
<td>uint8</td>
<td>Number</td>
<td>8-bit unsigned integer</td>
</tr>
<tr>
<td>uint16</td>
<td>Number</td>
<td>16-bit unsigned integer</td>
</tr>
<tr>
<td>uint32</td>
<td>Number</td>
<td>32-bit unsigned integer</td>
</tr>
<tr>
<td>uint64</td>
<td>Number</td>
<td>64-bit unsigned integer</td>
</tr>
<tr>
<td>union</td>
<td>Text/Number</td>
<td>Choice of member types</td>
</tr>
</tbody>
</table>
<h2 id="derived-types">Derived Types</h2>
<p>Είναι τύποι δεδομένων που προκύπτουν κατασκευάζονται με την εντολή typedef.</p>
<pre><code class="language-yang" data-lang="yang">typedef percent {
    type uint16 {
        range &quot;0 .. 100&quot;;
    }
    description &quot;Percentage&quot;;
}

leaf completed {
    type percent;
}
</code></pre><h1 id="τρόποι-επικοινωνίας">Τρόποι επικοινωνίας</h1>
<p><img src="/images/yang-data.png" alt="yang data"></p>
<p>Παρακάτω βλέπουμε μια αναπαράσταση του Yang stack από την παρουσίαση του Hank Preston στο <a href="https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKDEV-1368.pdf">BRKDEV-1368 στο Cisco Live του 2020 ΕΜΕΑ</a>
<img src="/images/stack.png" alt="yang stack"></p>
<h2 id="netconf">Netconf</h2>
<p>Πρωτόκολλο ασφαλούς μεταφοράς YANG Data βασισμένο συνήθως σε XML RPCs τα οποία μεταδίδονται μέσω SSH.
<a href="https://datatracker.ietf.org/doc/html/rfc4741">https://datatracker.ietf.org/doc/html/rfc4741</a>
<a href="https://datatracker.ietf.org/doc/html/rfc6241">https://datatracker.ietf.org/doc/html/rfc6241</a></p>
<p>Το Netconf μεταφέρει και επιστρέφει δεδομένα σε XML. Παρακάτω βλέπουμε το protocol stack του:
<img src="/images/netconf-stack.png" alt="netconf stack"></p>
<p>Παρακάτω βλέπουμε ένα παράδειγμα output από python script από το session BRKDEV-1368 στο Cisco Live:
<img src="/images/netconf.png" alt="netconf example"></p>
<p>Οι βιβλιοθήκες Python που υποστηρίζουν Netconf είναι οι:
ncclient - <a href="https://github.com/ncclient/ncclient">https://github.com/ncclient/ncclient</a>
scrapli-netconf - <a href="https://www.montanari.io/posts/2020/scrapli_netconf/">https://www.montanari.io/posts/2020/scrapli_netconf/</a></p>
<h2 id="restconf">Restconf</h2>
<p>Πρωτόκολλο ασφαλούς μεταφοράς YANG Data βασισμένο συνήθως σε HTTPS
<a href="https://datatracker.ietf.org/doc/html/rfc8040">https://datatracker.ietf.org/doc/html/rfc8040</a></p>
<h2 id="grpc">GRPC</h2>
<p>Πρωτόλλο μεταφοράς κατασκευασμένο από τη Google</p>
<h2 id="gnmi">GNMI</h2>
<h1 id="τρόποι-αναπαράστασης---εργαλεία">Τρόποι αναπαράστασης - εργαλεία</h1>
<h2 id="pyang">pyang</h2>
<p>Command Line εργαλείο βασισμένο σε python για human readable formated αναπαράσταση ενός μοντέλου Yang.
Η πιο απλή σύνταξη της εντολής είναι η παρακάτω, η οποία αναπαριστά ένα μοντέλο σε δενδροειδή μορφή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pyang –f tree &lt;yang-model-filename.yang&gt;
</code></pre></div><p>To Yang tree diagram καθορίζεται εδώ: <a href="https://datatracker.ietf.org/doc/html/rfc8340">https://datatracker.ietf.org/doc/html/rfc8340</a></p>
<p>Παράδειγμα παρμένο από το <a href="http://nxos-prog.ciscolive.com/pod0/labs/lab7/lab7-m1">site της Cisco για NX-OS Programmability</a> :</p>
<p><img src="/images/pyang-1.png" alt="pyang example"></p>
<p>O πηγαίος κώδικας διατίθεται στο <a href="https://github.com/mbj4668/pyang">https://github.com/mbj4668/pyang</a> ενώ εδώ μπορείτε να βρείτε ένα <a href="https://github.com/mbj4668/pyang/wiki/Tutorial">tutorial</a>.</p>
<h2 id="postman">Postman</h2>
<h2 id="yang-catalogue">Yang Catalogue</h2>
<h2 id="ans">ANS</h2>
<h2 id="yang-suite">Yang-Suite</h2>
<h1 id="whats-next">What&rsquo;s next</h1>
<h1 id="πηγές---links">Πηγές - Links</h1>
<p><a href="https://www.juniper.net/documentation/us/en/software/junos/netconf/topics/concept/netconf-yang-modules-overview.html">https://www.juniper.net/documentation/us/en/software/junos/netconf/topics/concept/netconf-yang-modules-overview.html</a>
<a href="https://www.fir3net.com/Networking/Protocols/an-introduction-to-netconf-yang.html">https://www.fir3net.com/Networking/Protocols/an-introduction-to-netconf-yang.html</a>
<a href="https://discuss.tail-f.com/c/yang/8">https://discuss.tail-f.com/c/yang/8</a></p>
<p><a href="https://github.com/YangModels/yang">https://github.com/YangModels/yang</a>
<a href="https://www.yangcatalog.org/">https://www.yangcatalog.org/</a>
<a href="https://github.com/mbj4668/pyang">https://github.com/mbj4668/pyang</a>
<a href="https://github.com/mbj4668/pyang/wiki/Tutorial">https://github.com/mbj4668/pyang/wiki/Tutorial</a>
<a href="https://developer.cisco.com/docs/yangsuite/">https://developer.cisco.com/docs/yangsuite/</a>
<a href="https://gblogs.cisco.com/pt/2021/07/01/introduction-to-yang-suite/">https://gblogs.cisco.com/pt/2021/07/01/introduction-to-yang-suite/</a></p>
<p><a href="https://blogs.cisco.com/getyourbuildon/network-programmability-with-yang-the-structure-of-network-automation-with-yang-netconf-restconf-and-gnmi">https://blogs.cisco.com/getyourbuildon/network-programmability-with-yang-the-structure-of-network-automation-with-yang-netconf-restconf-and-gnmi</a>
<a href="https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKDEV-1368.pdf">https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKDEV-1368.pdf</a>
<a href="https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKNMS-2032.pdf">https://www.ciscolive.com/c/dam/r/ciscolive/emea/docs/2020/pdf/BRKNMS-2032.pdf</a>
<a href="https://www.netacad.com/sites/default/files/images/careers/Webinars/DevNet/devnet_session_7_networkprogrammability_yang_netconf_restconf.pdf">https://www.netacad.com/sites/default/files/images/careers/Webinars/DevNet/devnet_session_7_networkprogrammability_yang_netconf_restconf.pdf</a>
<a href="https://www.slideshare.net/cmoberg/a-30minute-introduction-to-netconf-and-yang">https://www.slideshare.net/cmoberg/a-30minute-introduction-to-netconf-and-yang</a>
<a href="https://www.tail-f.com/what-is-yang/">https://www.tail-f.com/what-is-yang/</a>
<a href="https://www.tail-f.com/wordpress/wp-content/uploads/2013/03/Tail-f-NETCONF-YANG-Service-Automation-LISA-Usenix-2011.pdf">https://www.tail-f.com/wordpress/wp-content/uploads/2013/03/Tail-f-NETCONF-YANG-Service-Automation-LISA-Usenix-2011.pdf</a></p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to git</title>
            <link>https://netautogr.github.io/posts/2021/05/introduction-to-git/</link>
            <pubDate>Mon, 17 May 2021 23:02:37 +0300</pubDate>
            
            <guid>https://netautogr.github.io/posts/2021/05/introduction-to-git/</guid>
            <description>Γενικά - Version Control Systems Τί είναι ένα VCS Ένα Version Control System (VCS) είναι ένα σύστημα που καταγράφει τις αλλαγές που πραγματοποιούνται σε κάποιο αρχείο ή σε ένα σύνολο από αρχεία στην διάρκεια του χρόνου. Επίσης μπορεί να πραγματοποιήσει ανάκληση προηγούμενων εκδόσεων του αρχείου αν αυτό απαιτηθεί. Ένα VCS σου επιτρέπει να επαναφέρεις κάποια αρχεία σε μια προηγούμενη κατάσταση, ένα ολόκληρο project σε μια προηγούμενη κατάσταση, να βλέπεις τις αλλαγές από προηγούμενες εκδόσεις, ποιος έκανε την τελευταία αλλαγή και ίσως προκάλεσε κάποια δυσλειτουργία και πολλά άλλα.</description>
            <content type="html"><![CDATA[<h1 id="γενικά---version-control-systems">Γενικά - Version Control Systems</h1>
<h2 id="τί-είναι-ένα-vcs">Τί είναι ένα VCS</h2>
<p>Ένα Version Control System (VCS) είναι ένα σύστημα που καταγράφει τις αλλαγές που πραγματοποιούνται σε κάποιο αρχείο ή σε ένα σύνολο από αρχεία στην διάρκεια του χρόνου. Επίσης μπορεί να πραγματοποιήσει ανάκληση προηγούμενων εκδόσεων του αρχείου αν αυτό απαιτηθεί. Ένα VCS σου επιτρέπει να επαναφέρεις κάποια αρχεία σε μια προηγούμενη κατάσταση, ένα ολόκληρο project σε μια προηγούμενη κατάσταση, να βλέπεις τις αλλαγές από προηγούμενες εκδόσεις, ποιος έκανε την τελευταία αλλαγή και ίσως προκάλεσε κάποια δυσλειτουργία και πολλά άλλα. Γνωστά version control systems που έχουν γνωρίσει ευρεία χρήση στο παρελθόν είναι τα Subversion, CVS, κ.α.</p>
<h2 id="local-version-control-systems">Local Version Control Systems</h2>
<p>Πολλοί επιλέγουν σαν μια μέθοδο Version Control την αντιγραφή των αρχείων που θέλουν να παρακολουθήσουν σε ένα διαφορετικό φάκελο ή φακέλους (ίσως με κάποιο timestamp) στην διάρκεια του χρόνου. Αυτή η πρακτική συνηθίζεται γιατί είναι απλή αλλά είναι και επιρρεπείς σε λάθη καθώς είναι εύκολο να ξεχάσεις σε ποιο φάκελο είσαι και κατά λάθος να γράψεις στα λάθος αρχεία η να αντιγράψεις αρχεία που δεν έπρεπε. Για την αντιμετώπιση τέτοιων θεμάτων αναπτύχθηκαν τα τοπικά VCS που περιλαμβάνουν μια απλή βάση δεδομένων που καταγράφει όλες τις αλλαγές στα αρχεία που απαιτείται.
Centralized Version Control Systems</p>
<p>Ένα ζήτημα που δεν μπορούσαν να αντιμετωπίσουν τα local VCS ήταν η ανάγκη των προγραμματιστών να συνεργαστούν για ένα project από διαφορετικά συστήματα. Έτσι αναπτύχθηκαν τα κεντρικοποιημένα VCS. Τέτοια συστήματα (όπως το CVS και το Subversion) περιλαμβάνουν ένα κεντρικό server που περιέχει όλα τα αρχεία που παρακολουθούνται καθώς και ένα αριθμό από clients που κατεβάζουν αρχεία  από τον κεντρικό server για να τα επεξεργαστούν. Για πολλά χρόνια αυτή ήταν η standard μέθοδος που χρησιμοποιούσαν οι προγραμματιστές για version control.</p>
<h2 id="centralized-version-control-systems">Centralized Version Control Systems</h2>
<p>Ένα ζήτημα που δεν μπορούσαν να αντιμετωπίσουν τα local VCS ήταν η ανάγκη των προγραμματιστών να συνεργαστούν για ένα project από διαφορετικά συστήματα. Έτσι αναπτύχθηκαν τα κεντρικοποιημένα VCS. Τέτοια συστήματα (όπως το CVS και το Subversion) περιλαμβάνουν ένα κεντρικό server που περιέχει όλα τα αρχεία που παρακολουθούνται καθώς και ένα αριθμό από clients που κατεβάζουν αρχεία  από τον κεντρικό server για να τα επεξεργαστούν. Για πολλά χρόνια αυτή ήταν η standard μέθοδος που χρησιμοποιούσαν οι προγραμματιστές για version control.
<img src="/images/git1.png" alt="Centralized VCS"></p>
<p>Αυτή η μέθοδος είχε πολλά πλεονεκτήματα σε σχέση με τα local VCS. Για παράδειγμα όλοι ξέρουν τι αλλαγές έχει κάνει ο καθένας σε κάποιο project. Επίσης οι administrators έχουν πλήρη έλεγχο στο τι μπορεί να κάνει κάποιος και γενικά είναι πολύ πιο απλό να διαχειρίζεσαι ένα κεντρικοποιημένο VCS από το να έχει ο καθένας ένα τοπικό σύστημα στον υπολογιστή του. Παρόλα αυτά ένα τέτοιο σύστημα έχει και πολλά μειονεκτήματα. Το πιο σημαντικό είναι ότι βασίζεται σε ένα κεντρικό server που αποτελεί single point of failure. Αν για κάποιο λόγο αυτός ο server δεν είναι λειτουργικός για κάποιο διάστημα τότε για όσο διαρκεί το πρόβλημα δεν μπορούν να πραγματοποιηθούν αλλαγές από την ομάδα. Επίσης αν ο σκληρός δίσκος του server παρουσιάσει κάποια δυσλειτουργία τότε κινδυνεύει να χαθεί ολόκληρο το ιστορικό του project και όλες οι εκδόσεις που έχουν καταγραφεί.</p>
<h2 id="distributed-version-control-systems">Distributed Version Control Systems</h2>
<p>Τα μειονεκτήματα των Centralized VCS ήρθαν να καλύψουν τα Distributed VCS. Σε τέτοια συστήματα DVCS (όπως το Git) οι clients δεν κατεβάζουν μόνο την τελευταία έκδοση των αρχείων που θέλουν να επεξεργαστούν αλλά κατεβάζουν ολόκληρο το repository με το πλήρες ιστορικό του. Έτσι οποιοσδήποτε client μπορεί να επαναφέρει πλήρως ένα repository σε περίπτωση που οποιοσδήποτε server εμφανίσει κάποια δυσλειτουργία.
<img src="/images/git2.png" alt="Distributed VCS"></p>
<h1 id="εισαγωγή-στο-git">Εισαγωγή στο GIT</h1>
<h2 id="τι-είναι-το-git">Τι είναι το GIT</h2>
<p>Η κύρια διαφορά του GIT από τα υπόλοιπα VCS είναι ο τρόπος που διαχειρίζεται τα δεδομένα. Τα περισσότερα συστήματα VCS αποθηκεύουν την πληροφορία σαν ένα σύνολο από αρχεία και για κάθε αρχείο αποθηκεύουν τις αλλαγές που γίνονται στην διάρκεια του χρόνου. Αντιθέτως το Git διαχειρίζεται την πληροφορία σαν ένα σύνολο από snapshots (commits) των αρχείων που παρακολουθούνται. Κάθε φορά που πρέπει να καταγράφουν αλλαγές σε κάποια αρχεία το Git παίρνει ένα snapshot από το σύνολο των αρχείων και αποθηκεύει μια αναφορά σε αυτό το snapshot. Επίσης όλες οι λειτουργίες του Git μπορούν να πραγματοποιηθούν στον τοπικό υπολογιστή καθώς έχει το πλήρες repository με το αντίστοιχο ιστορικό. Το GIT για οποιαδήποτε αλλαγή αποθηκεύει παράγει πρώτα ένα checksum με τον μηχανισμό SHA-1 hash και αυτό χρησιμοποιείται σαν αναφορά για αυτή την αλλαγή. Αυτό προσφέρει ακεραιότητα δεδομένων καθώς το Git διασφαλίζει ότι δεν μπορούν να αλλάξουν τα περιεχόμενα οποιουδήποτε αρχείου χωρίς αυτό να γίνει αντιληπτό.
To Git έχει γνωρίσει μεγάλη επιτυχία και έχει γίνει το de-facto standard για distributed source control και ένα βασικό εργαλείο που πρέπει να μάθει κάποιος προκειμένουν να αρχίσει το ταξίδι του στον κόσμο του DevOps.</p>
<p>Συνιστούμε να επισκεφθείτε τα παρακάτω sites:</p>
<ul>
<li><a href="https://git-scm.com/">https://git-scm.com/</a> - Git Website &amp; Documentation</li>
<li><a href="https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/">https://www.freecodecamp.org/news/what-is-git-and-how-to-use-it-c341b049ae61/</a> - Γρήγορη εισαγωγή χωρίς να μπαίνει κανείς σε ιδιαίτερο βάθος, από τη γνωστή πλατφόρμα για μάθηση coding.</li>
</ul>
<h2 id="πλατφόρμες-για-git-repositories">Πλατφόρμες για Git Repositories</h2>
<p>To ίδιο το Git υπάρχει σε εκδόσεις για διάφορα λειτουργικά συστήματα ενώ συνοδεύεται και με εργαλεία όπως το Git Bash, Git Desktop, κλπ.
Υπάρχουν όμως και πλατφόρμες που βασίζονται στο Git και δίνουν υπηρεσίες Online Repository, είτε στο Internet, είτε σε Enterprise Επίπεδο.
Οι πιο γνωστές είναι το <a href="https://www.github.com">Github</a> και το <a href="https://www.gitlab.com">Gitlab</a>. Ειδικά το Gitlab μπορεί κάποιος να το εγκαταστήσει τοπικά και σε δωρεάν έκδοση, σε γνωστά λειτουργικά συστήματα, σε Docker/Kunernetes, ακόμα και σε ένα RaspberryPi! <a href="https://about.gitlab.com/install/">https://about.gitlab.com/install/</a></p>
<h1 id="git-basics">GIT Basics</h1>
<h2 id="οι-3-καταστάσεις-του-git">Οι 3 καταστάσεις του Git</h2>
<p>Οι 3 κύριες καταστάσεις αρχείων στο Git είναι :</p>
<ul>
<li><strong>Modified</strong>: Έχει γίνει αλλαγή σε κάποιο αρχείο αλλά δεν έχει γίνει commit στην βάση δεδομένων του Git.</li>
<li><strong>Staged</strong>: Έχει επιλεγεί κάποιο αρχείο από την τρέχουσα έκδοση έτσι ώστε στο επόμενο commit να αποθηκευτούν οι αλλαγές του στην επόμενη έκδοση που θα δημιουργηθεί.</li>
<li><strong>Committed</strong>: Τα δεδομένα έχουν αποθηκευτεί σωστά στην τοπική βάση δεδομένων του Git.</li>
</ul>
<p>Τα 3 μέρη ενός Git project είναι :</p>
<ul>
<li><strong>Working Directory</strong></li>
<li><strong>Staging Area</strong></li>
<li><strong>Git Repository</strong>
<img src="/images/git3.png" alt="Git Locations"></li>
</ul>
<h3 id="working-directory">Working Directory</h3>
<p>Είναι ένα checkout μιας έκδοσης του project. Τα αρχεία του working directory ανακτώνται από την βάση δεδομένων που βρίσκεται στο git directory έτσι ώστε να μπορούν να χρησιμοποιηθούν και να τροποποιηθούν.</p>
<h3 id="staging-area">Staging Area</h3>
<p>Περιέχεται στο Git directory και αποθηκεύει την πληροφορία σχετικά με το τι θα πρέπει να καταχωρηθεί στο επόμενο commit.</p>
<h3 id="git-repository-local">Git Repository (Local)</h3>
<p>Σε αυτό το directory το Git αποθηκεύει όλα τα metadata και την βάση δεδομένων των αλλαγών για το project. Είναι το πιο σημαντικό μέρος του Git και είναι αυτό που αντιγράφεται όταν γίνεται clone ένα απομακρυσμένο repository.</p>
<h3 id="git-workflow-local">Git workflow (Local)</h3>
<p>Το βασικό Git workflow ακολουθεί τα παρακάτω βήματα :</p>
<ol>
<li>Γίνονται αλλαγές στο working directory.</li>
<li>Επιλέγονται τα αρχεία που θα γίνουν add στο staging area έτσι ώστε να γίνουν μέρος των αλλαγών που θα αποθηκευτούν στο επόμενο commit.</li>
<li>Πραγματοποιείται commit. Σε αυτό το βήμα όλα τα αρχεία που βρίσκονται στο staging area αποθηκεύονται σε ένα snapshot που καταχωρείται στο git directory.</li>
</ol>
<h3 id="remote-repository">Remote Repository</h3>
<p>Αναφέραμε φυσικά για Distributed Version Control Systems, μιλήσαμε για πλατφόρμες για συνεργασια μέσω git, και κλωνοποίηση απομακρυσμένων (remote) repositories.
Στο git υποστηρίζεται ως location και το <strong>remote repository</strong>, ή όπως αλλιώς αναφέρεται &ldquo;<strong>upstream repository</strong>&quot;.
Ένα remote repository μπορεί να αποτελεί το σημείο που συγκλίνουν όλες οι προσπάθειες των developers που συμμετέχουν σε ένα code project, οι οποίοι συνεργάζονται ασύγχρονα. Προφανώς η οργάνωση του remote repository γίνεται με παρόμοιο τρόπο αλλά προϋποθέτει πολλά ακόμα βήματα για να μπορεί να γίνει σωστά η ασύγχρονη αυτή συνεργασία, να ελεχθεί αν κάποιος έχει δικαίωμα ή όχι να συγχρονιστεί με τον κώδικα στο remote repository, ή και να παρέχει ενημερώσεις, και πολλά άλλα.
Περισσότερα γι αυτό θα θίξουμε στους τομείς που θα αναφέρουμε για:</p>
<ul>
<li>Git Config</li>
<li>Git Pull</li>
<li>Git Push</li>
<li>Git Branching</li>
</ul>
<h2 id="δημιουργία-git-repository---git-init">Δημιουργία Git Repository - git init</h2>
<p>Οι πιο συνηθισμένοι τρόποι για την δημιουργία ενός Git Repository είναι :</p>
<ul>
<li>Μπορεί να μετατραπεί ένας φάκελος του τοπικού υπολογιστή (που δεν υπόκειται σε κάποιο version control) σε ένα Git Repository. Αυτό μπορεί να γίνει με τις παρακάτω εντολές :</li>
</ul>
<p>Σε Windows:</p>
<pre><code class="language-DOS" data-lang="DOS">$ cd C:/Users/user/my_project
$ git init
</code></pre><p>ή σε Linux:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">mkdir my_project
cd myproject
git init .
</code></pre></div><p>Έτσι δημιουργείται ένας φάκελος .git μέσα στον φάκελο του project όπου περιέχει όλα τα απαραίτητα αρχεία του repository (και όχι μόνο όπως θα δούθμε παρακάτω..)</p>
<h2 id="αντιγραφή-ενός-git-repository---git-clone">Αντιγραφή ενός Git Repository - git clone</h2>
<ul>
<li>Μπορεί να αντιγραφεί ή &ldquo;κλωνοποιηθεί&rdquo; (clone) όπως λέμε, ένα υπάρχον Git Repository από ένα απομακρυσμένο υπολογιστή/server. Αυτό μπορεί να γίνει με την εντολή git clone <!-- raw HTML omitted -->. Για παράδειγμα αν θες να κάνει clone το netprog_basics repository από το CiscoDevNet στο github τότε η εντολή είναι :</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git clone https://github.com/CiscoDevNet/netprog_basics.git
</code></pre></div><p>Αυτή η εντολή θα δημιουργήσει ένα φάκελο netprog_basics που θα περιέχει ένα φάκελο .git ο οποίος περιλαμβάνει το πλήρες repository του project με το ιστορικό του. Επίσης θα γίνει check out η τελευταία έκδοση των αρχείων έτσι ώστε να είναι έτοιμα να επεξεργαστούν. Στην περίπτωση αυτή το cloned repository κρατάει τη σύνδεση του με το απομακρυσμένο directory, με το οποίο μπορεί να συγχρονιστεί εκ νέου, εφόσον χρειαστεί να ενημερωθούν τα αρχεία στις τρέχουσες εκδόσεις τους.</p>
<h2 id="καταγραφή-αλλαγών-στο-repository">Καταγραφή αλλαγών στο Repository</h2>
<p>Κάθε αρχείο στο repository Μπορεί να είναι σε μια από τις καταστάσεις <strong>tracked</strong> ή <strong>untracked</strong>. Tracked είναι τα αρχεία που αποτέλεσαν μέρος του τελευταίου snapshot και μπορεί να είναι <strong>unmodified</strong>, <strong>modified</strong> ή <strong>staged</strong>. Με λίγα λόγια τα αρχεία σε κατάσταση tracked είναι τα αρχεία που παρακολουθεί το Git. Untracked είναι όλα τα υπόλοιπα αρχεία στον φάκελο που δεν παρακολουθούνται.</p>
<h3 id="git-status">Git status</h3>
<p>Η κύρια εντολή που χρησιμοποιείται για την παρακολούθηση της κατάστασης των αρχείων είναι <strong>git status</strong> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
nothing to commit, working tree clean
</code></pre></div><p>Αυτό σημαίνει ότι το working directory είναι clean δηλαδή δεν υπάρχει αλλαγή σε κάποιο από τα αρχεία που είναι σε κατάσταση tracked. Τώρα έστω ότι προσθέτουμε ένα απλό αρχείο README στο working directory και εκτελούμε ξανά την εντολή <strong>git status</strong> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ echo <span style="color:#e6db74">&#39;My Project&#39;</span> &gt; README
$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Untracked files:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to include in what will be committed<span style="color:#f92672">)</span>

    README

nothing added to commit but untracked files present <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add&#34;</span> to track<span style="color:#f92672">)</span>
</code></pre></div><h3 id="git-add">Git Add</h3>
<p>Βλέπουμε ότι το αρχείο που προστέθηκε είναι στην κατάσταση untracked οπότε το Git δεν παρακολουθεί τις αλλαγές του. Ουσιαστικά πρόκειται για ένα αρχείο που δεν ήταν μέρος του τελευταίου snapshot (commit). Αν θέλουμε τώρα να αλλάξουμε την κατάσταση του αρχείου σε tracked  έτσι ώστε να παρακολουθείται από το Git θα πρέπει να εκτελέσουμε την εντολή <strong>git add</strong> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git add README
If you run your status command again, you can see that your README file is now tracked and staged to be committed:

$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>

    new file:   README
</code></pre></div><p>Πλέον θεωρούμε ότι το αρχείο είναι staged καθώς είναι κάτω από το “Changes to be committed”.  Έστω ότι τροποποιούμε τώρα ένα ήδη υπάρχον tracked αρχείο CONTRIBUTING.md και εκτελούμε πάλι την εντολή <strong>git status</strong> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git reset HEAD &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>

    new file:   README

Changes not staged <span style="color:#66d9ef">for</span> commit:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>

    modified:   CONTRIBUTING.md
</code></pre></div><p>To αρχείο CONTRIBUTING.md είναι κάτω από το “Changes not staged for commit” που σημαίνει ότι έχουν γίνει αλλαγές στο αρχείο αλλά δεν είναι staged. Για να γίνει staged θα πρέπει να γίνει και αυτό <strong>git add</strong> :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git reset HEAD &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>

    new file:   README
    modified:   CONTRIBUTING.md
</code></pre></div><p>Τώρα και τα δύο αρχείο είναι staged και θα αποτελέσουν μέρος του snapshot που θα δημιουργηθεί στο επόμενο commit. Έστω ότι σε αυτό το σημείο γίνεται μια ακόμα τροποποίηση στο αρχείο CONTRIBUTING.md πριν εκτελεστεί το commit :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git reset HEAD &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged <span style="color:#66d9ef">for</span> commit:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git checkout -- &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>

    modified:   CONTRIBUTING.md
</code></pre></div><p>Παρατηρούμε ότι το αρχείο CONTRIBUTING.md είναι ταυτόχρονα και staged και unstaged. Αυτό γίνεται γιατί το Git κάνει stage ένα αρχείο στην κατάσταση ακριβώς που βρισκόταν όταν εκτελέστηκε το git add. Οπότε αφού έγιναν και πάλι αλλαγές στο αρχείο για να γίνει staged στην νέα του μορφή θα πρέπει να εκτελεστεί και πάλι η εντολή git add έτσι ώστε στο επόμενο commit να αποθηκευτεί η πιο updated έκδοση του αρχείου :</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with <span style="color:#e6db74">&#39;origin/master&#39;</span>.
Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git reset HEAD &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>

    new file:   README
    modified:   CONTRIBUTING.md
</code></pre></div><h2 id="ομαδική-προσθήκη-αρχείων-στο-working-directory">Ομαδική προσθήκη αρχείων στο working directory</h2>
<p>Είδαμε πως προσθέτουμε ένα - ένα αρχείο στο working directory, ώστε στη συνέχεια να γίνει staged και στη συνέχεια να δημιουργηθεί ένα snapshot με το <strong>git commit</strong>.</p>
<p>Αν όμως δουλεύουμε με περισσότερα αρχεία και θέλουμε να τα προσθέσουμε όλα στο working directory; Τότε μπορούμε να χρησιμοποιήσουμε την εντολή git add με διαφορετικά ορίσματα, πχ.</p>
<ul>
<li>git add . (προσθέτει όλα τα αρχεία στο τρέχον directory, αν κάποια έχουν ήδη προστεθεί, προστίθενται αυτά που λείπουν)</li>
<li>git add * (το ίδιο με το προηγούμενο)</li>
<li>git add *.py (μόνο τα αρχεία που έχουν extension &lsquo;.py&rsquo;)</li>
</ul>
<h2 id="git-configuration">Git Configuration</h2>
<h3 id="γενικά">Γενικά</h3>
<p>Μέχρι τώρα έχουμε δει εντολές που δεν χρειάζονται ιδιαίτερες ρυθμίσεις στο τοπικό μας repository. Ωστόσο προτού προχωρήσουμε στην οριστική υποβολή των αρχείων του repository για τη δημιουργία ενός <em>snapshot</em> ή <em><strong>commit</strong></em> όπως λέγεται, πρέπει να περάσουμε κάποιες βασικές ρυθμίσεις στο repository μας.</p>
<h3 id="git-config-scopes">Git Config Scopes</h3>
<p>Οι ρυθμίσεις για το git ορίζονται σε τρία βασικά επίπεδα:</p>
<ul>
<li><em>Global</em>: Ορίζονται σε επίπεδο χρήστη για όλα τα πιθανά repositories που θα ορίσει ο χρήστης. Συνήθως σε linux systems βρίσκονται σε hidden dir .git κάτω από το home directory του χρήστη.</li>
<li><em>System</em>: Ορίζονται σε επίπεδο συστήματος και σε linux συστήματα βρίκονται συνήθως στο /etc/ directory. Δεν είναι σύνηθες να ορίζονται ρυθμίσεις σε αυτό το επίπεδο, η ανάπτυξη μέσω git έχει μεγάλη σχέση με την ταυτότητα του εκάστοτε χρήστη.</li>
<li><em>Local</em>: Ορίζονται ανά project directory. Συνήθως βρίσκονται σε hidden dir .git στο directory του project.</li>
</ul>
<h3 id="basic-configuration">Basic configuration</h3>
<p>To Git διατηρεί τα αρχεία του σε hidden directory εντός του project όπου αποθηκεύονται δεδομένα και ρυθμίσεις με όνομα .git .
Ωστόσο διατηρεί και global ρυθμίσεις σε κεντρικό directory.
Το λιγότερο που μπορεί/πρέπει κανείς να ρυθμίσει στο .git/config αρχείο είναι με τις παρακάτω εντολές:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git config user.name <span style="color:#e6db74">&#34;John Doe&#34;</span>
git config user.email johndoe@example.com
</code></pre></div><p>Οι ρυθμίσεις μπορούν να γίνουν είτε σε τοπικό επίπεδο ανά project directory είτε σε καθολικό (global) επίπεδο:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git config --global user.name <span style="color:#e6db74">&#34;John Doe&#34;</span>
$ git config --global user.email johndoe@example.com
</code></pre></div><h3 id="προβολή-config">Προβολή Config</h3>
<p>Με τις εντολές git config μαζί με τον ορισμό του scope μπορούμε να ρυθμίσουμε, να ακυρώσουμε ρυθμίσεις και να δούμε τις τρέχουσες ρυθμίσεις. Η προβολή των τρεχουσών ρυθμίσεων για το τοπικό project dir γίνεται με την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config --local --list
</code></pre></div><p>ή</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config --list
</code></pre></div><p>(το local είναι το default).
Αντικαθιστώντας την λέξη local με <em>system</em> ή <em>global</em> βλέπουμε τις αντίστοιχες ρυθμίσεις σε επίπεδο <em>system</em> ή <em>global</em>.
Παρακάτω βλέπουμε ένα τυπικό output αν δεν έχουμε κάνει τίποτε άλλο πέραν του init:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">core.repositoryformatversion<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
core.filemode<span style="color:#f92672">=</span>true
core.bare<span style="color:#f92672">=</span>false
core.logallrefupdates<span style="color:#f92672">=</span>true
</code></pre></div><p>Μπορούμε αντίστοιχα να δούμε το αρχείο ρυθμίσεων:</p>
<pre><code class="language-#" data-lang="#">[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
</code></pre><h3 id="προαπαιτούμενες-ρυθμίσεις">Προαπαιτούμενες ρυθμίσεις</h3>
<p>To git θα αρνηθεί να προχωρήσει σε commit αν δεν έχουμε ορίσει τις εξής βασικές παραμέτρους που αναφέραμε νωρίτερα:</p>
<ul>
<li><em>user.name</em></li>
<li><em>user.email</em></li>
</ul>
<p>Εκτός της χρήσης των εντολών:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config user.name &lt;user name&gt;
git config user.email &lt;user email&gt;
</code></pre></div><p>Διαφορετικά μπορεί κανείς να κάνει κατευθείαν edit το αρχείο:</p>
<pre><code class="language-#" data-lang="#">[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[user]
        email = user1@example.com
        name = user1name
</code></pre><p>Με αντίστοιχο τρόπο ορίζονται και άλλες παράμετροι οι οποίες παίζουν ρόλο είτε για λειτουργία σε τοπικό επίπεδο είτε για λειτουργία με απομακρυσμένα repositories.
Ενδεχομένως να χρειαστεί να οριστεί και η παράμετρος <em><strong>http.sslVerify</strong></em> σε <em><strong>False</strong></em>.</p>
<p>Τώρα είμαστε έτοιμοι να προχωρήσουμε σε commit!</p>
<h2 id="git-commit">Git commit</h2>
<p>Αφού έχει ολοκληρωθεί η δημιουργία του staging area (και έχουμε ολοκληρώσει τις βασικές ρυθμίσεις) το επόμενο βήμα είναι να γίνουν commit οι αλλαγές. Οποιοδήποτε αρχείο έχει τροποποιηθεί ή έχει δημιουργηθεί και δεν έχει προστεθεί με git add δεν θα αποτελέσει μέρος του επόμενου commit.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git commit
</code></pre></div><p>Συνήθως κατά το git commit μας ζητείται να ορίσουμε ένα σύντομο μήνυμα που συνοδεύει το συγκεκριμένο commit.
Για να οριστεί κατευθείαν το μήνυμα παράλληλα με το commit, μπορούμε να χρησιμοποιήσουμε την ίδια εντολή με μια μικρή παραλλαγή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git commit -am <span style="color:#e6db74">&#34;Commit Message&#34;</span>
</code></pre></div><p>Παρακάτω φαίνεται ο κύκλος ζωής της κατάστασης των αρχείων στο Git:
<img src="/images/git4.png" alt="Git Circle of Life"></p>
<h2 id="git-log">Git Log</h2>
<p>Βασικό πλεονέκτημα όπως είπαμε των Source Control systems είναι η δυνατότητα να διαχωρίσουμε την πορεία ενός coding project σε διαφορετικά snapshots στο χρόνο και να μπορούμε, αν χρειαστεί, να μετακινηθούμε προς τα πίσω σε συγκεκριμένα σημεία στο &ldquo;παρελθόν&rdquo;.
Η παρακολούθηση της πορείας των διαδοχικών commits αλλά γενικά και των συμβάντων κατά τη χρήση του git, προκύπτει με τη χρήση της εντολής git log:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git log

ή 
git log --oneline <span style="color:#f92672">(</span>πολύ διαδεδομένο για να δείχνει κάθε commit σε μόνο μια γραμμή ώστε να φαίνεται συνοπτικά όλο το commit history<span style="color:#f92672">)</span>
</code></pre></div><p>Ειδικά η δεύτερη σύνθεση της εντολής δίνει μια λίστα όπου σε κάθε γραμμή φαίνεται αριστερά ένα hash value για το συγκεκριμένο commit, και το μήνυμα με το οποίο έχει αποθηκευτεί το commit (αυτό που ορίσαμε με το option -am). To hash value είναι ιδιαίτερα σημαντικό για ενέργειες που αφορούν την επιστροφή σε προηγούμενα σημεία του git history.</p>
<p>Π.χ. αν τρέξουμε το command στο repository όπου γράφουμε το παρόν, παίρνουμε το παρακάτω:</p>
<pre><code class="language-git" data-lang="git">1771f5a (HEAD -&gt; master) more changes
b123574 changing..
2ff0bc8 first blocks to introduction to Git
b941b52 Test commit
d4e87c3 updated intro to docker
f844640 added intro to docker
</code></pre><p>Βλέπουμε ότι υπάρχει κι άλλη πληροφορία εδώ.. π.χ. τί είναι το HEAD -&gt; master) ; Μην βιάζεστε, περισσότερα γι αυτό παρακάτω.</p>
<p>Παραπομπές για git log:</p>
<ul>
<li><a href="https://www.thegeekstuff.com/2014/04/git-log/">https://www.thegeekstuff.com/2014/04/git-log/</a></li>
<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History">https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History</a></li>
<li><a href="https://git-scm.com/docs/git-log">https://git-scm.com/docs/git-log</a> (documentation για το git log)</li>
</ul>
<h2 id="git-head">Git Head</h2>
<p>To Head είναι ο pointer που δείχνει που βρισκόμαστε στο git history αυτή τη στιγμή. H &ldquo;χειραγώγηση&rdquo; του HEAD ώστε να δείχνει στο σημείο που θέλουμε είναι πολύ βασικό εργαλείο τόσο για την μετακίνηση στο Git History όσο και μεταξύ Git Branches.
Περισσότερα στις περιγραφές των :</p>
<ul>
<li>Git Checkout</li>
<li>Git Reset</li>
<li>Get Revert</li>
</ul>
<h1 id="αναίρεση-αλλαγών">Αναίρεση αλλαγών</h1>
<h2 id="αναίρεση-unstaged-αλλαγών">Αναίρεση unstaged αλλαγών.</h2>
<p>Aς πούμε ότι κάνετε μια αλλαγή και θέλετε να την αναιρέσετε. Αν είχατε προηγουμένως κάνει commit και τρέξετε το git status, θα πάρετε μια απάντηση για το ότι υπάρχουν modified αρχεία, π.χ.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$git status
On branch master
Your branch is ahead of <span style="color:#e6db74">&#39;origin/master&#39;</span> by <span style="color:#ae81ff">4</span> commits.
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git push&#34;</span> to publish your local commits<span style="color:#f92672">)</span>

Changes not staged <span style="color:#66d9ef">for</span> commit:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>
        modified:   content/posts/introduction_to_git.md

no changes added to commit <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add&#34;</span> and/or <span style="color:#e6db74">&#34;git commit -a&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Σας αναφέρει ξεκάθαρα &ldquo;Changes not staged for commit&rdquo;.
Αν θέλετε να γυρίσετε στην προηγούμενη έκδοση ή θα πρέπει να ακολουθήσετε τις οδηγίες για το git restore, ή μπορείτε να τρέξετε την εντολή git checkout με όρισμα το αρχείο που είναι modified, π.χ.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$git checkout content/posts/introduction_to_git.md
Updated <span style="color:#ae81ff">1</span> path from the index
</code></pre></div><p>Το αποτέλεσμα είναι να αναιρεθούν οι αλλαγές και το αρχείο αυτό να επιστρέψει στη μορφή που είχε στο τελευταίο commit. Αν τρέξετε και πάλι git status, θα δείτε ότι το τοπικό working tree είναι καθαρό.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git status
On branch master
Your branch is ahead of <span style="color:#e6db74">&#39;origin/master&#39;</span> by <span style="color:#ae81ff">4</span> commits.
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git push&#34;</span> to publish your local commits<span style="color:#f92672">)</span>

nothing to commit, working tree clean
</code></pre></div><p>(Προφανώς όταν το έκανα αυτό έχασα τις αλλαγές και ευτυχώς τις είχα αποθηκεύσει αλλού ώστε να τις αποκαταστήσω, γιατί όσο αφορά το git, είχαν αναιρεθεί!)
Το git checkout έχει και άλλες χρήσεις, αλλά προς το παρόν ας μείνουμε εντός θέματος στην αναίρεση αλλαγών.</p>
<h2 id="αναίρεση-staging">Αναίρεση staging</h2>
<p>Έστω ότι προχωρήσατε παρακάτω. Κάνατε stage τς αλλαγές με git add αλλά το μετανιώσατε. Θέλετε να γυρίσετε προς τα πίσω, δηλαδή να κρατήσετε προς το παρόν τις αλλαγές, αλλά να μην είναι πλέον staged. Ή θα χρησιμοποιήσετε την εντολή που σας προτείνει το git, την git restore &ndash;staged με όρισμα το αρχείο που έγινε stage, ή θα χρησιμοποιήσετε την εντολή git reset. Π.χ.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git status
On branch master
Your branch is ahead of <span style="color:#e6db74">&#39;origin/master&#39;</span> by <span style="color:#ae81ff">4</span> commits.
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git push&#34;</span> to publish your local commits<span style="color:#f92672">)</span>

Changes to be committed:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore --staged &lt;file&gt;...&#34;</span> to unstage<span style="color:#f92672">)</span>
        modified:   content/posts/introduction_to_git.md

$ git reset content/posts/introduction_to_git.md
Unstaged changes after reset:
M       content/posts/introduction_to_git.md
$ git status
On branch master
Your branch is ahead of <span style="color:#e6db74">&#39;origin/master&#39;</span> by <span style="color:#ae81ff">4</span> commits.
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git push&#34;</span> to publish your local commits<span style="color:#f92672">)</span>

Changes not staged <span style="color:#66d9ef">for</span> commit:
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add &lt;file&gt;...&#34;</span> to update what will be committed<span style="color:#f92672">)</span>
  <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git restore &lt;file&gt;...&#34;</span> to discard changes in working directory<span style="color:#f92672">)</span>
        modified:   content/posts/introduction_to_git.md

no changes added to commit <span style="color:#f92672">(</span>use <span style="color:#e6db74">&#34;git add&#34;</span> and/or <span style="color:#e6db74">&#34;git commit -a&#34;</span><span style="color:#f92672">)</span>
</code></pre></div><p>Το αρχείο δεν είναι πλέον staged αρά παραμένει modified.</p>
<h2 id="αναίρεση-commit">Αναίρεση commit</h2>
<p>Όταν έχει γίνει το commit μπορούμε να γυρίσουμε πίοω ή κατά ένα commit ή για περισσότερα. Οι αλλαγές αναιρούνται σειριακά. Αν γυρίσουμε πίσω τρία commits, τότε ότι έχει γίνει ενδιάμεσα δεν θα υπάρχει πια. Υπάρχουν δύο τρόποι να το πετύχουμε αυτό. Είτε ορίζοντας τον αριθμό των commits που θέλουμε να πάμε πίσω είτε ορίζοντας το hash του commit που θέλουμε να πάμε. Δηλαδή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">$ git log --all --decorate --oneline
530cfac <span style="color:#f92672">(</span>HEAD -&gt; master<span style="color:#f92672">)</span> writing git reset
03b1d5e <span style="color:#f92672">(</span>origin/master, origin/HEAD<span style="color:#f92672">)</span> working on git reset
cb6ede2 Working on git reset
a2e1f4b working on commit
6a66aa2 working on git reset
5448ed2 ready to share with the team
1e62faa git log, head, remote repo
1771f5a more changes
b123574 changing..
7d77268 Merge branch <span style="color:#e6db74">&#39;master&#39;</span> of https://github.com/netautogr/hugo adding content <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;Introduction to Git&#39;</span>
2ff0bc8 first blocks to introduction to Git
</code></pre></div><p>Προτού προχωρήσουμε είναι σημαντικό να καταλάβουμε τα τρία options που έχουμε για το git reset: soft, mixed και hard. Κάθε μια από τις παρακάτω εντολές μπορούν να χρησιμοποιηθούν και για μεμονωμένα αρχεία.</p>
<h3 id="git-reset-head---soft">git reset HEAD~ &ndash;soft</h3>
<p>Ο HEAD πάει πίσω στο αμέσως προηγούμενο commit και τα τωρινά περιεχόμενα του φακέλου (ότι διαφέρει) εμφανίζονται ως unstaged.</p>
<h3 id="git-reset-head---mixed">git reset HEAD~ &ndash;mixed</h3>
<p>Ο HEAD πάει πίσω στο αμέσως προηγούμενο commit και τα τωρινά περιεχόμενα του φακέλου (ότι διαφέρει) εμφανίζονται ως staged. Είναι και η προεπιλογή οπότε η εντολή git reset HEAD~ έχει ακριβώς το ίδιο αποτέλεσμα (χωρίς option)</p>
<h3 id="git-reset-head---hard">git reset HEAD~ &ndash;hard</h3>
<p>Ο HEAD πάει πίσω στο αμέσως προηγούμενο commit και τα τωρινά περιεχόμενα του φακέλου (ότι διαφέρει) διαγράφονται.</p>
<h3 id="git-reset-headnumber">git reset HEAD~<!-- raw HTML omitted --></h3>
<p>Ο HEAD πάει πίσω όσα commit ορίσουμε με το νουμερο. Προφανώς μπορεί να συνδυαστεί με τα options που αναφέραμε νωρίτερα.</p>
<h3 id="git-reset-head">git reset HEAD</h3>
<p>Γυρνάμε στο HEAD το ίδιο</p>
<h3 id="git-reset-hash-file">git reset <!-- raw HTML omitted --> <!-- raw HTML omitted --></h3>
<p>Σημαίνει &ldquo;τράβα το αρχείο <!-- raw HTML omitted --> από το commit με hash <!-- raw HTML omitted -->&rdquo; (αντί να το τραβήξουμε από το commit που δείχνει ο ΗEAD).</p>
<h2 id="git-revert">Git Revert</h2>
<p>Όπως αναφέραμε όταν κάνουμε <code>git reset --hard</code>, τα περιεχόμενα που είχαμε διαγράφονται οριστικά. Το git reset έχει γενικά και τη συνέπεια ότι το ενδιάμεσο git history που είχε καταγραφεί με τις αλλαγές που θέλουμε να αναιρέσουμε, διαγράφεται επίσης!</p>
<p><strong>Τί γίνεται αν θέλουμε να &ldquo;επιστρέψουμε στο παρελθόν&rdquo; στο στυλ που το έκαναν οι εκδικητές στο &ldquo;Endgame&rdquo;?</strong> Δηλαδή όπως λέει κι ο HULK, όταν επιστρέφεις στο παρελθόν <em><strong>&ldquo;your past is now your future&rdquo;</strong></em>!
Θέλουμε δηλαδή να φαίνεται η πορεία που είχαμε μέχρις εδώ, ότι αναιρέσαμε μια συγκεκριμένη αλλαγή, και μετά συνεχίσαμε από εκεί.
Για το σκοπό αυτό μπορούμε να χρησιμοποιήσουμε την εντολή</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git revert 
</code></pre></div><p>Η σύνταξη είναι η ίδια. Μας επιτρέπει να κάνουμε ένα <em>&ldquo;selective undo&rdquo;</em> για συγκεκριμένο commit διατηρώντας το history μέχρι τώρα. To revert που κάναμε σημειώνεται μπροστά στο git history. Προφανώς ανάλογα με το τί προέκυψε από το revert ενδεχομένως να φτάσουμε στο ίδιο σημείο που περιγράφουμε παρακάτω, με &ldquo;ασύμβατες αλλαγές&rdquo;. Ας μην προτρέχουμε όμως. Συνεχίστε να διαβάζετε ;)</p>
<h1 id="branching--merging">Branching &amp; Merging</h1>
<p>Η ιδέα πίσω από το branching είναι αυτή της παράλληλης ανάπτυξης νέων features ή παραλλαγών του βασικού κώδικα. Γενικά το git έχει ως σκοπό την οργανωμένη και ασύγχρονη ανάπτυξη κώδικα από πολλαπλές συνεργαζόμενες πλευρές. Όμως δεν είναι ανάγκη να εργάζονται όλοι πάνω σε μία και μοναδική έκδοση του κώδικα που μπορεί να είναι και ο παραγωγικός κώδικας. Μπορούν τα νέα features να αναπτύσσονται σε εκδόσεις του κώδικα οι οποίες &ldquo;διακλαδίζονται&rdquo; (<em>branch</em>) από τη βασική και όταν είναι έτοιμα, ο κώδικας τους &ldquo;συγχωνεύεται&rdquo; (<em>merge</em>) ξανά με τη βασική.</p>
<p>Άλλη περίπτωση που το branching είναι πολύ χρήσιμο είναι η περίπτωση του κώδικα δοκιμώμ (<em>test branch</em>). Στην περίπτωση αυτή μπορεί στο test branch αυτό να αναπτύσσεται ο κώδικας ο οποίος προκύπτει από τη βασική έκδοση (<em>main/master branch</em> - ναι γιατί έχουμε να λάβουμε υπόψη και την political correctness, τρομάρα μας), ο οποίος τακτικά όταν ολοκληρώνεται ένας κύκλος δοκιμών γίνεται merge πίσω στο βασικό κλάδο.</p>
<h2 id="branching">Branching</h2>
<p>Η δημιουργία ενός branch από το βασικό και η αλλαγή πάνω σε αυτό τον κλάδο μπορεί να γίνει με δύο τρόπους:</p>
<ul>
<li>Πρώτα δημιουργία του κλάδου και μετά αλλαγή σε αυτών σε δύο βήματα:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git branch &lt;branch-name&gt;
git checkout &lt;brach-name&gt;
</code></pre></div><ul>
<li>Δημιουργία του κλάδου και αλλαγή σε αυτόν σε ένα βήμα:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git checkout -b &lt;branch-name&gt;
</code></pre></div><p>Μπορούμε να γυρίσουμε πίσω στον βασικό κλάδο με</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git checkout master
</code></pre></div><p>Κάθε φορά που αλλάζουμε κλάδο, τα περιεχόμενα του working directory αλλάζουν για να αντικατατοπτρίσουν την εικόνα του συγκεκριμένου κλάδου.</p>
<h2 id="merging">Merging</h2>
<p>Όταν τελειώσουμε την επεξεργασία του διαχωροσμένου κλάδου έρχεται η στιγμή που πρέπει να συγχωνευτεί με τον κύριο κλάδο. Αυτό γίνεται με χρήση της εντολής merge. Για να κάνουμε merge πρέπει να βρισκόμαστε στον κλάδο με τον οποίο θέλουμε να συγχωνευτεί ο διαχωρισμένος. Για να συγχωνεύσουμε τον κλάδο test-feature1 στον master πρέπει πρώτα να επιστρέψουμε στο master και μετά να εκδώσουμε την εντολή merge:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git checkout master
git merge test-feature1
</code></pre></div><p>Τα αποτελέσματα της εντολής merge εξαρτώνται από το τί έχει συμβεί στο μεταξύ από όταν είχε δημιουργηθεί ο κλάδος test-feature1 και τι πορεία είχε στο μεταξύ ο κύριος κλάδος. Τρία είναι τα βασικά ενδεχόμενα:</p>
<ul>
<li>Δεν έχει γίνει καμία αλλαγή στον κύριο κλάδο.
Αυτό που θα συμβεί σε αυτή την περίπτωση είναι γνωστό και ως Fast Forward Merge, δηλαδή ο HEAD απλώς μετακινείται στο τελευταίο commit του test-feature1 κλάδου και αυτά είναι πλέον τα περιεχόμενα του master branch</li>
<li>Έχουν γίνει αλλαγές και στον κύριο κλάδο αλλά δεν είναι αντικρουόμενες και η συγχώνευση ολοκληρώνεται χωρίς πρόβλημα.</li>
<li>Έχουν γίνει αλλαγές και στον κύριο κλάδο, οι οποίες δεν είναι συμβατές με τις αλλαγές που έχουν γίνει στον κλαδο test-feature1. Σε αυτή την περίπτωση υπάρχει <strong>σύγκρουση</strong> (<em>conflict</em>). To git θα μας πληροφορήσει σχετικά και θα μας παρουσιάσει τη σύγκριση των δύο κλάδων. Είτε στο command line είτε σε κάποιο IDE που χρησιμοποιούμε, θα πρέπει χειροκίνητα να επέμβουμε και να διορθώσουμε τη σύγκρουση : 1) αποδεχόμενοι το κομμάτι του κλάδου test-feature1, 2) αποδεχόμενοι το κκομμάτι του κύριου κλάδου, 3) κάνοντας edit το τμήμα της σύγκρουσης όπως νομίζουμε.
Με ότι καταλήξουμε, εφόσον κάνουμε εκ νέου commit, αυτό θα μείνει πλέον ως merged περιεχόμενο στον κύριο κλάδο.</li>
</ul>
<h2 id="διαγραφή-και-έλεγχος-branches">Διαγραφή και έλεγχος branches</h2>
<p>Στη συνέχεια μπορούμε αν θέλουμε να διαγράψουμε τον κλάδο που είχαμε δημιουργήσει με την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git branch -d &lt;branch-name&gt;
</code></pre></div><p>Μπορούμε να δούμε όλα τα branches με την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git branch --all
</code></pre></div><p>Εφόσον λειτουργούμε σε ένα πλαίσιο CI/CD (<em>Continuous Integration/Continuous Deployment/Delivery</em>) ενδεχομένως κάποια branches να αναπτύσσονται συνεώς και ο κώδικας που αναπτύσσεται σε ξεχωριστό περιβάλλον π.χ το test brach πιθανόν να γίνεται deploy μετά από κάθε commit στο test περιβάλλον.</p>
<p>Αν θέλει κανείς να δει το ιστορικό των commit&rsquo;s διευκολύνοντας μας στην παρακολούθηση των branching and merging, μπορεί να εκτελέσει την παρακάτω εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Bash" data-lang="Bash">git log --all --decorate --oneline --graph

* 6e596fb <span style="color:#f92672">(</span>HEAD -&gt; master, origin/master, origin/HEAD<span style="color:#f92672">)</span> finishing merging
* 530cfac writing git reset
* 03b1d5e working on git reset
* cb6ede2 Working on git reset
* a2e1f4b working on commit
* 6a66aa2 working on git reset
* 5448ed2 ready to share with the team
* 1e62faa git log, head, remote repo
* 1771f5a more changes
* b123574 changing..
*   7d77268 Merge branch <span style="color:#e6db74">&#39;master&#39;</span> of https://github.com/netautogr/hugo adding content <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;Introduction to Git&#39;</span>
|<span style="color:#ae81ff">\ </span> 
| * b941b52 Test commit
* | 2ff0bc8 first blocks to introduction to Git
|/  
</code></pre></div><h1 id="δουλεύοντας-με-repote-repositories">Δουλεύοντας με repote repositories</h1>
<h2 id="γενικά-1">Γενικά</h2>
<p>Από τη στιγμή που κάποιος αναπτύσσει μέσα σε μια ομάδα, έχει πλέον νόημα η χρήση remote online repositories όπου θα γίνεται συγχρονισμός και θα καθορίζεται η συνεργασία με το πλαίσιο που ορίζει το git. Οι προβλεπόμενες δομές και διαδικασίες προχωράνε σε βάθος, ωστόσο για αρχή θα πρέπει κάποιος να ορίσει τις αντίστοιχες ρυθμίσεις για το remote repository και τον τρόπο login/authenticate σε αυτό.
Εφόσον η ανάπτυξη γίνεται με κάποιο IDE που είναι <em>git friendly</em>, oι ρυθμίσεις αυτές θα πρέπει να προσαρμοστούν και να συνδυαστούν με αντίστοιχες ρυθμίσεις εντός του IDE, ώστε οι βασικές ενέργειες που εκτελούνται με το Git να μπούν να εκτελεστούν με μεγάλη ευκολία με το GUI του IDE.</p>
<h2 id="public--private-repositoriesservers">Public &amp; Private Repositories/Servers</h2>
<p>Η συνεργασία δεν έχει νόημα αν δεν <em>ανεβεί</em> περιεχόμενο σε server που να έχουν πρόσβαση και άλλοι developers. Γνωστά sites που δίνουν τέτοια δυνατότητα είτε για δημόσια repositories ή για repositories περιορισμένης πρόσβασης, είναι το Github - <a href="https://github.com">https://github.com</a> και το Gitlab - <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> .
Αν θέλετε να στήσετε ιδιωτικό repository στο enterprise περιβάλλον που εργάζεστε, αυτό είναι σαφέστατα πιο εύκολο με το gitlab το οποίο διαθέτει και έκδοση δωρεάν για τέτοιο σκοπό. Το πως μπορεί κανείς να στήσει το gitlab σε τέτοια μορφή είναι πέρα από το scope του παρόντος άρθρου.
Το Gitlab διαθέτει και ενισχυμένες δυνατότητες για enterprise level DevOps (CI/CD κλπ) στο ίδιο προϊόν. Από την άλλη, το Github είναι πλέον στον έλεγχο της Microsoft, η οποία είναι πίσω από την ανάπτυξη του Visual Studio Code (πολύ διαδεδομένου IDE για ανάπτυξη κώδικα), το οποίο δίνει αυξημένες δυνατότητες integration μεταξύ του εργαλείου και του Github, χωρίς ιδιαίτερο κόπο.</p>
<h2 id="ελάχιστες-ενέργειες">Ελάχιστες ενέργειες</h2>
<p>Δύο είναι τα βασικά σενάρια:</p>
<ul>
<li>Δημιουργείτε ένα τοπικό repository το οποίο θέλετε στη συνέχεια να ανεβάσετε σε ένα Git Server ώστε να είναι εφικτή η συνεργασία με τρίτους γι αυτό το project.</li>
<li>Τραβάτε τον κώδικα από ένα remote repository από κάποιον git server σε τοπικό directory και στη συνέχεια προχωράτε σε τοπική επεξεργασία του project συγχρονίζοντας κατά διαστήματα τις αλλαγές τόσο τις δικές σας προς το remote όσο και άλλες αλλαγές που συμβαίνουν στο remote και γίνονται commit &amp; push από άλλους, στο δικό σας τοπικό repository.</li>
</ul>
<p>Και στις δύο περιπτώσεις είναι απαραίτητο να έχετε δημιουργήσει χρήστη στην απομακρυσμένη πλατφόρμα και να έχετε την κατάλληλη πρόσβαση/δικαιώματα είτε για να φτιάξετε νέο project είτε για να συμμετέχετε στην ανάπτυξη ενός υπάρχοντος. Αυτές οι ενέργειες γίνονται στην ίδια την πλατφόρμα και προηγούνται. Στη συνέχεια η επικοινωνία γίνεται με δύο δυνατούς τρόπους:</p>
<ul>
<li>μέσω ssh (τελεί υπό κατάργηση)</li>
<li>μέσω https (συνήθως μέσω API Token)</li>
</ul>
<h3 id="δημιουργία-remoteupstream-από-local-repository">Δημιουργία remote/upstream από local repository</h3>
<p>Στo πρώτo σενάριο είναι απαραίτητο να έχετε ορίσει δύο βασικά κομμάτια ρυθμίσεων:</p>
<ul>
<li>Την τοποθεσία του remote repository και τον ορισμό του ως upstream</li>
<li>Την αντιστοίχιση του τοπικού τρέχοντος branch με αντίστοιχο branch στο remote/upstream</li>
</ul>
<p>Οι απαραίτητες εντολές είναι οι:</p>
<ul>
<li><em>git remote add origin <!-- raw HTML omitted -->.git</em> - ορίζει ως origin (remote) το remote repo url</li>
<li><em>git branch &ndash;set-upstream-to origin/<!-- raw HTML omitted --></em> - ορίζει το remote branch ως upstream του τρέχοντος τοπικού branch. Αν το τρέχον είναι το master, τότε η εντολή:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git branch --set-upstream-to origin/master 
</code></pre></div><p>καθορίζει το remote master ως αντίστοιχο upstream του local master branch.</p>
<p>Στη συνέχεια μπορούμε να εκτελέσουμε την εντολή</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git push origin master 
</code></pre></div><p>για να συγχρονίσουμε το remote master branch με τις τελευταίες αλλαγές του τοπικού master.</p>
<p>Οι κινήσεις αυτές μπορούν να γίνουν και σε ένα βήμα με την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git -c http.sslVerify<span style="color:#f92672">=</span>false push --set-upstream &lt;remote repo url&gt;.git &lt;remote branch&gt;
</code></pre></div><p>Αν πρέπει πρώτα να τραβήξουμε τυχόν αλλαγές από το remote repo τότε εκτελούμε την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git pull 
</code></pre></div><h3 id="δημιουργία-local-repository-από-remoteupstream">Δημιουργία local repository από remote/upstream</h3>
<p>Αυτό γίνεται με απλό τρόπο με τη χρήση της εντολής git clone:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git clone https://&lt;username&gt;:&lt;API_Token&gt;@&lt;remote repo url&gt;.git &lt;local path - optional&gt; --progress
</code></pre></div><h3 id="έλεγχος-ρυθμίσεων">Έλεγχος ρυθμίσεων</h3>
<p>Αν δείτε ότι κατόπιν εκτέλεσης της εντολής υπολείπονται ρυθμίσεις στο config, μπορείτε να εφαρμόσετε τις εντολές που αναφέραμε παραπάνω για να τις συμπληρώσετε (π.χ. <em>git branch &ndash;set-upstream-to</em>)
Μπορείτε να χρησιμοποιήσετε την εντολή <em>git remote -v</em> και το <em>git status remote</em> για να ελέγχετε την κατάσταση.</p>
<h3 id="authentication">Authentication</h3>
<p>Ένας απλός τρόπος είναι να ορίσετε στο config ότι τα credentials αποθηκεύονται σε τοπικό αρχείο με την εντολή:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config credential.helper store --file &lt;filepath&gt;
</code></pre></div><p>ή σε επίπεδο χρήστη με την εντολή</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git config --global credential.helper store --file &lt;filepath&gt;
</code></pre></div><p>Στη συνέχεια στην πρώτη προσπάθεια για git push ή git pull, θα πάρετε prompt για το password του χρήστη με user name αυτό που ορίσατε στο config. Εδώ προφανώς με όσα γράφουμε μέχρι τώρα, το password αντιστοιχεί στο https API Token.</p>
<p><strong>Η επιτυχημένη εργασία με remote repositories είναι η βάση για τη συνεργατική ανάπτυξη κώδικα σε κοινά project ομάδων, ανεξάρτητα με την τοποθεσία των μελών της εκάστοτε ομάδας</strong>.</p>
<h2 id="the-cli-way-or-the-ide-way">The CLI way or the IDE way?</h2>
<p>Αν χρησιμοποιείτε IDE όπως το Visual Studio Code, τo authentication προς γνωστά remote sites γίνεται πιο εύκολα εφόσον το επιθυμούμε. Στην περίπτωση του github μπορεί να γίνει login από το profil του χρήστη ή να δοθεί εξουσιοδότηση από τη σελίδα του Github προς το visual studio code αν εκτελέσει κανείς το κατάλληλο link.
Αλλά και οι υπόλοιπες εργασίες, όπως το git init, add, commit, add remote, git push, pull, branch, status, log, κλπ μπορούν να εκτελεστούν με τη βοήθεια VS Code extensions, όπως:</p>
<ul>
<li>gitlab workflow</li>
<li>gitlab explorer</li>
<li>git lens</li>
<li>git autoconfig</li>
<li>git automator</li>
<li>git history</li>
<li>git-ignore</li>
</ul>
<p>κλπ.
Κάθε extension έχει δικό της κομμάτι στο αρχείο ρυθμίσεων του vs code. Το αρχείο είναι διαμορφωμένο σε μορφή json.</p>
<h1 id="σημαντικά-links">Σημαντικά links</h1>
<h2 id="γενικά-2">Γενικά</h2>
<p><a href="https://git-scm.com/book/en/v2/">https://git-scm.com/book/en/v2/</a>
<a href="https://ohshitgit.com/">https://ohshitgit.com/</a>
<a href="https://developer.cisco.com/learning/tracks/devnet-beginner/programming-fundamentals/git-basic-workflows/step/1">https://developer.cisco.com/learning/tracks/devnet-beginner/programming-fundamentals/git-basic-workflows/step/1</a>
<a href="https://towardsdatascience.com/an-easy-beginners-guide-to-git-2d5a99682a4c">https://towardsdatascience.com/an-easy-beginners-guide-to-git-2d5a99682a4c</a>
<a href="https://community.codenewbie.org/wolde_ai/git-learn-the-basics-part-one-1f6b">https://community.codenewbie.org/wolde_ai/git-learn-the-basics-part-one-1f6b</a>
<a href="https://towardsdatascience.com/the-only-6-git-commands-you-need-to-know-995065db1ae0">https://towardsdatascience.com/the-only-6-git-commands-you-need-to-know-995065db1ae0</a>
<a href="https://towardsdatascience.com/learn-enough-git-to-be-useful-281561eef959">https://towardsdatascience.com/learn-enough-git-to-be-useful-281561eef959</a>
<a href="https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/">https://www.freecodecamp.org/news/understanding-git-basics-commands-tips-tricks/</a>
<a href="https://towardsdatascience.com/mastering-git-commands-the-logic-behind-git-ad3fbcc6fb33">https://towardsdatascience.com/mastering-git-commands-the-logic-behind-git-ad3fbcc6fb33</a></p>
<h2 id="git-branching">Git Branching</h2>
<p><a href="https://learngitbranching.js.org/">https://learngitbranching.js.org/</a>
<a href="https://www.freecodecamp.org/news/how-to-use-branches-in-git/">https://www.freecodecamp.org/news/how-to-use-branches-in-git/</a></p>
<h2 id="visual-studio---git-integration">Visual Studio - Git Integration</h2>
<p><a href="https://channel9.msdn.com/Shows/Visual-Studio-Toolbox/The-New-Git-Experience">https://channel9.msdn.com/Shows/Visual-Studio-Toolbox/The-New-Git-Experience</a>
<a href="https://devblogs.microsoft.com/visualstudio/enhanced-productivity-with-git-in-visual-studio/">https://devblogs.microsoft.com/visualstudio/enhanced-productivity-with-git-in-visual-studio/</a>
<a href="https://docs.microsoft.com/en-us/visualstudio/version-control/?view=vs-2019">https://docs.microsoft.com/en-us/visualstudio/version-control/?view=vs-2019</a></p>
<h2 id="git-tutorials---labs">Git Tutorials - Labs</h2>
<p><a href="https://git-scm.com/docs/gittutorial">https://git-scm.com/docs/gittutorial</a>
<a href="https://youtu.be/DVRQoVRzMIY">https://youtu.be/DVRQoVRzMIY</a>
<a href="https://www.youtube.com/watch?v=USjZcfj8yxE">https://www.youtube.com/watch?v=USjZcfj8yxE</a>
<a href="https://developer.cisco.com/learning/tracks/devnet-beginner/programming-fundamentals/git-basic-workflows/step/1">https://developer.cisco.com/learning/tracks/devnet-beginner/programming-fundamentals/git-basic-workflows/step/1</a>
<a href="https://developer.cisco.com/learning/lab/git-intro/step/1">https://developer.cisco.com/learning/lab/git-intro/step/1</a>
<a href="https://developer.cisco.com/learning/lab/collab-tools-python-scripting-basics-with-git-itp/step/1">https://developer.cisco.com/learning/lab/collab-tools-python-scripting-basics-with-git-itp/step/1</a>
<a href="https://developer.cisco.com/learning/lab/git-branching/step/1">https://developer.cisco.com/learning/lab/git-branching/step/1</a>
<a href="https://developer.cisco.com/learning/lab/git-servers/step/1">https://developer.cisco.com/learning/lab/git-servers/step/1</a></p>
<h1 id="next-steps">Next steps</h1>
<p>Στην επόμενη version του άρθρου θα προσθέσουμε βασικά στοιχεία για το πως μπορεί κάποιος να διαχειριστεί το git σε ένα project μέσα από ένα IDE όπως το Visual Studio Code καθώς και να καθορίσει remote repositories (upstream/origin) και να χρησιμοποιήσει git servers για το συγχρονισμό των projects για ομάδες και κατά προέκταση σε συνδυασμό με εργαλεία CI.</p>
]]></content>
        </item>
        
        <item>
            <title>Introduction to Docker</title>
            <link>https://netautogr.github.io/posts/2021/02/introduction-to-docker/</link>
            <pubDate>Fri, 12 Feb 2021 09:45:49 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2021/02/introduction-to-docker/</guid>
            <description>Εισαγωγή To Docker είναι μια αρχιτεκτονική για containers. Άλλη αντίστοιχη αρχιτεκτονική είναι το OCI (Open Container Initiative). Τα containers ενσωματώνουν όλα τα κομμάτια που χρειάζεται μια εφαρμογή για να λειτουργήσει ξεχωριστά από τις υπόλοιπες σε ένα ενιαίο πακέτο, το οποίο απομονώνεται από τις υπόλοιπες εφαρμογές και λειτουργικό σύστημα με τρόπους που βασίζονται στη χρήση linux namespaces και έχουν τις απαρχές τους στο chroot jail. Θα μπορούσε κανείς να πει ότι τα containers υλοποιούν operating system virtualization κατά αντίστοιχο τρόπο που τα Virtual Machines υλοποιούν hardware virtualization.</description>
            <content type="html"><![CDATA[<h2 id="εισαγωγή">Εισαγωγή</h2>
<p>To Docker είναι μια αρχιτεκτονική για containers. Άλλη αντίστοιχη αρχιτεκτονική είναι το OCI (Open Container Initiative). Τα containers ενσωματώνουν όλα τα κομμάτια που χρειάζεται μια εφαρμογή για να λειτουργήσει ξεχωριστά από τις υπόλοιπες σε ένα ενιαίο πακέτο, το οποίο απομονώνεται από τις υπόλοιπες εφαρμογές και λειτουργικό σύστημα με τρόπους που βασίζονται στη χρήση linux namespaces και έχουν τις απαρχές τους στο chroot jail. Θα μπορούσε κανείς να πει ότι τα containers υλοποιούν operating system virtualization κατά αντίστοιχο τρόπο που τα Virtual Machines υλοποιούν hardware virtualization. Κατά τον ίδιο τρόπο λοιπόν που τα Virtual Machines λειτουργούν απομονωμένα και μοιράζονται το ίδιο φυσικό hardware, έτσι και τα containers λειτουργούν απομονωμένα και μοιράζονται το ίδιο λειτουργικό σύστημα με απόλυτη απομόνωση σε επίπεδο λειτουργικού και processes.</p>
<p><img src="https://www.redhat.com/cms/managed-files/virtualization-vs-containers.png" alt="os-virtualization" title="OS Virtualization"></p>
<p><strong>Ξεκινήστε πρώτα από εδώ:</strong></p>
<ul>
<li><a href="https://docs.docker.com/">https://docs.docker.com/</a></li>
<li><a href="https://youtu.be/iqqDU2crIEQ">https://youtu.be/iqqDU2crIEQ</a> How to get started with Docker</li>
<li><a href="https://youtu.be/QeQ2MH5f_BE">https://youtu.be/QeQ2MH5f_BE</a> Simplify things with docker-compose</li>
<li><a href="https://youtu.be/3c-iBn73dDE">https://youtu.be/3c-iBn73dDE</a> Docker Tutorial for Beginners [FULL COURSE in 3 Hours]</li>
</ul>
<p>Και δείτε κι αυτά:</p>
<ul>
<li><a href="https://www.netapp.com/devops-solutions/what-are-containers/">https://www.netapp.com/devops-solutions/what-are-containers/</a></li>
<li><a href="https://www.docker.com/resources/what-container">https://www.docker.com/resources/what-container</a></li>
<li><a href="https://www.redhat.com/en/topics/containers/whats-a-linux-container">https://www.redhat.com/en/topics/containers/whats-a-linux-container</a></li>
<li><a href="https://opensource.com/article/19/10/namespaces-and-containers-linux">https://opensource.com/article/19/10/namespaces-and-containers-linux</a></li>
<li><a href="https://www.simplilearn.com/tutorials/docker-tutorial/what-is-docker-container">https://www.simplilearn.com/tutorials/docker-tutorial/what-is-docker-container</a></li>
<li><a href="https://github.com/wsargent/docker-cheat-sheet">https://github.com/wsargent/docker-cheat-sheet</a> Αυτό μπαίνει και στο τέλος..</li>
</ul>
<h2 id="συστατικά">Συστατικά</h2>
<p>Μπορεί κανείς να πάρει μια ιδέα από το παρακάτω post:</p>
<p><a href="https://developers.redhat.com/blog/2016/01/13/a-practical-introduction-to-docker-container-terminology/?utm_campaign=containers&amp;intcmp=70160000000h1s6AAA">https://developers.redhat.com/blog/2016/01/13/a-practical-introduction-to-docker-container-terminology/?utm_campaign=containers&amp;intcmp=70160000000h1s6AAA</a></p>
<p>Ακολουθούν συνοπτικοί ορισμοί:</p>
<h3 id="docker-server">Docker server</h3>
<p>Γνωστός και ως docker host, είναι στο μηχάνημα (φυσικό ή VM) που φιλοξενεί τα containers και είναι το λογισμικό που διαμοιράζει τα resources, φροντίζει για την απομόνωση και την λειτουργία των containers (start, stop, κλπ) αλλά και την επικοινωνία τους είτε μεταξύ τους είτε με τον υπόλοιπο κόσμο.</p>
<h3 id="docker-client">Docker client</h3>
<p>Το σύνολο των εντολών (linux) ή το ξεχωριστό λογισμικό (windows) που αποτελούν το περιβάλλον με το οποίο ο χρήστης ή μια εξωτερική εφαρμογή μπορεί να επικοινωνήσει με το Docker Server και να επηρεάσει τη λειτουργία των containers.</p>
<h3 id="docker-engine">Docker Engine</h3>
<p>Το σύνολο της client-server εφαρμογής που περιλαμβάνει</p>
<ul>
<li>Docker Server</li>
<li>Docker Client</li>
<li>Docker APIs</li>
</ul>
<p><a href="https://docs.docker.com/engine/">https://docs.docker.com/engine/</a></p>
<h3 id="docker-images">Docker images</h3>
<p>Βασικά πακέτα πάνω στα οποία μπορεί κανείς να βασιστεί και να φτιάξει containers ή πιο σύνθετα images. Είναι δυνατό να φτιαχτούν πολύπλοκα σύνολα λογισμικού με αντίστοιχα πολύπλοκο τρόπο. Επίσης μπορεί ένα image να φτιαχτεί με layers. Ο τρόπος που φτιάχνεται ένα image από στοιχειώδη συστατικά μπορεί να προδιαγραφεί απόλυτα με την χρήση των dockerfiles. Η διαδικασία της κατασκευής του image ονομάζεται build. Η δυνατότητα ορισμού των προδιαγραφών του build για ένα image δίνει τη δυνατότητα της χρήσης των containers ως Infrastructure as Code (περιγράφω απλώς πως θέλω να είναι το image και αυτό χτίζεται κατά τις προδιαγραφές μου αυτόματα).
Έχει σημασία η προσοχή στις διαδικασίες που ορίζονται στα dockerfile καθώς κάθε εντολή καταλήγει στο να προσθέσει ένα ακόμα layer στο image. Τα layers από τη στιγμή που θα προστεθούν είναι immutable. Γι αυτό και πολλές φορές οι εντολές σε κάθε βήμα ενός Dockerfile καταλήγουν να είναι αρκετά πολύπλοκες, καθώς δεν μπορεί κανείς να διαγράψει στην πράξη σε ένα επόμενο layer αρχεία που προστέθηκαν σε προηγούμενο layer. Επειδή τα images αποθηκεύονται σε κεντρικά σημεία - <strong>Docker registry</strong> - και γίνονται download από εκεί, το μέγεθος των images έχει σημασία για την αποδοτικότητα της υποδομής.</p>
<p><a href="https://circleci.com/blog/tips-for-optimizing-docker-builds/">https://circleci.com/blog/tips-for-optimizing-docker-builds/</a></p>
<h2 id="docker-hub">Docker Hub</h2>
<p>Η κεντρική αποθήκη της Docker για τα images. Είναι ο δημόσιος &ldquo;κάταλογος&rdquo; - Registry για τα images και μπορεί ο καθένας να δημοσιεύσει τα δικά του, είτε εταιρείες/ιδρύματα είτε ιδιώτες. Μπορεί φυσικά κανείς να διαθέτει και private registry που φιλοξενείται στη δική του ιδιωτική υποδομή.</p>
<p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h3 id="docker-containers">Docker containers</h3>
<p>Τα αγαπημένα μας κουτάκια που φτιάχνονται κατ'ομοίωση των images αλλά μπορούν να επηρεαστούν κατά τη δημιουργία τους ώστε να υπάρξουν τροποιήσεις. Επίσης κατά τη δημιουργία των containers από κάποιο image, όπου το container είναι πλέον σαν ένα ξεχωριστό σύνολο από processes και εφαρμογές, μπορούν να οριστούν και διάφορες παράμετροι λειτουργίας, όπως μέρη του filesystem του host στα οποία έχει πρόσβαση το container με συγκεκριμένα δικαιώματα, τα network ports τα οποία ορίζονται ως σημεία πρόσβασης για το container είτε από το εξωτερικό δίκτυο είτε από το εσωτερικό &ldquo;εικονικό&rdquo; δίκτυο του docker host.</p>
<h3 id="docker-networking">Docker networking</h3>
<p>Γενικά μπορούμε να σκεφτούμε το τρόπο που επικοινωνούν τα containers μεταξύ τους αλλά και με το υπόλοιπο δίκτυο ως bridging. Δημιουργούνται εικονικά bridges στον Docker host που μπορούν να έχουν ή να μην έχουν επικοινωνία με το εξωτερικό δίκτυο. Ένα container μπορεί να επικοινωνεί με περισσότερα από ένα bridges. Αυτό δίνει τη δυνατότητα για πολύπλοκους συνδυασμούς ώστε κάποια containers π.χ. να επικοινωνούν μόνο μεταξύ τους και να χρησιμοποιούν τρίτο container για να δώσουν services προς το εξωτερικό δίκτυο. Φυσικά τέτοιες αρχιτεκτονικές είναι αρκετά πολύπλοκες και η χρήση τους γίνεται αρκετά απλούστερη με τη χρήση εργαλείων για orchestration. Η επικοινωνία μεταξύ containers μπορεί αν χρειαστει να ξεπεράσει τα όρια ενός docker host, κάτι το οποίο θεωρείται αρκετά πολύπλοκο σαν αρχιτεκτονική και πέρα από τη λογική ενός εισαγωγικού post.</p>
<h2 id="χρήση">Χρήση</h2>
<p>Η χρήση των containers μπορεί να αφορά από την αυτοματοποίηση των διαδικασιών χτησίματος μιας πλατφόρμας ή μιας εφαρμογής μέχρι την πλήρη χρήση <strong>Infrastructure as Code</strong>.
Μπορούν να θεωρηθούν, όταν οι εφαρμογές που υλοποιούν διαχωρίζονται απόλυτα ως προς τα services σε ξεχωριστά containers, ότι αποτελούν βασικό συστατικό του <strong>Microservices Architecture</strong>, ειδικά με το συνδυασμό με εργαλεία orchestration, όπου μπορεί κανείς να χρησιμοποιήσει υποδομές <strong>CI/CD</strong> για να ενημερώνει τον κώδικα των εφαρμογών, να χτίζει τα κατάλληλα images, να σηκώνει τα containers, να κάνει τις δοκιμές κλπ δημιουργώντας πλήρεις κύκλους ανάπτυξης και λειτουργίας λογισμικού και υπηρεσιών.
Το <strong>orchestration</strong> γενικά μπορεί να διευκολύνει αρκετά τη χρήση των containers σε κάθε σενάριο.
Εδώ και κάποια χρόνια η χρήση των containers εξετάζεται και σε περιπτώσεις <strong>edge computing</strong> στο δίκτυο, καθώς πολλές πλατφόρμες networking υποστηρίζουν containers όπως π.χ. τα Cisco Catalyst 9K και όχι μόνο..
<a href="https://blogs.cisco.com/developer/minecraft-on-catalyst-switch">https://blogs.cisco.com/developer/minecraft-on-catalyst-switch</a> Can You Play Minecraft on a Cisco Switch? Flo Pachinger</p>
<h2 id="docker-compose">Docker-compose</h2>
<p>Προδιαγραφές καταγεγραμμένες σε αρχεία ρυθμίσεων, μπορούν να χρησιμοποιηθούν απο κατάλληλα εργαλεία για να επιτευχθεί η αυτοματοποίηση της δημιουργίας images και containers. Ένα τέτοιο εργαλείο για την πλατφόρμα Docker με απλή λειτουργία, κυρίως για λόγους test &amp; development (χωρίς να αποκλείεται περιορισμένη χρήση σε production) είναι το docker-compose.</p>
<ul>
<li><a href="https://docs.docker.com/compose/">https://docs.docker.com/compose/</a> Πλήρες documentation της πλατφόρμας</li>
<li><a href="https://docs.docker.com/compose/production/">https://docs.docker.com/compose/production/</a> Πως να προσαρμόσετε το docker-compose για χρήση στην παραγωγή.</li>
</ul>
<p>Στο docker-compose χρησιμοποιούνται αρχεια yaml για τον ορισμό services τα οποία χτίζονται με containers αλλά και για τον ορισμό της επικοινωνίας αυτών των services μεταξύ τους και με τον εξωτερικό κόσμο. Το docker-compose σαν λογισμικό βασίζεται σε ένα αριθμό από εντολών και είναι αντίστοιχο με το docker client runtime σε σχέση με το τί μπορεί να εκτελεστεί για να επηρεάσουμε τη λειτουργία των services βασισμένα στα docker containers ή να κάνουμε συγκεκιμένους ελέγχους. Η χρήση της πλατφόρμας Docker απλοποιείται εξαιρετικά με τη χρήση του docker-compose.
Βασικό μειονέκτημα του docker-compose είναι η έλλειψη υποστήριξης scale out δηλαδή να μπορεί κανείς να προσθέτει/αφαιρεί nodes οριζόντια για όποιο service χρειάζεται ώστε να ανταποκρίνεται στο φόρτο και τις ανάγκες για τις συγκεκριμένες εφαρμογές.
Για τέτοιες περιπτώσεις είναι απαραίτητες διαφορετικά εργαλεία όπως το docker swarm ή το Kubernetes</p>
<h3 id="kubernetes">Kubernetes</h3>
<p>Το απόλυτο εργαλείο για υποστήριξη microservices architecture και scalable υποδομών εφαρμογών σε περιβάλλοντα cloud. Βασικό του συστατικό είναι το pod το οποίο μπορεί να περιλαμβάνει ένα ή περισσότερα services. Η προσθήκη ή αφαίρεση pods είναι ο τρόπος που μια τέτοια υποδομή αντιμετωπίζει την αύξηση/μείωση του load για τις εφαρμογές που χτίζονται πάνω στα containers. Πρόσφατα ανακοινώθηκε ότι το Kubernetes δεν θα υποστηρίζει πλέον docker containers αλλά η ακριβής ερμηνεία αυτής της ανακοίνωσης αφήνεται σε πιο ειδικούς από μένα (&ldquo;ναι μεν αλλά&hellip;&quot;)
<a href="https://youtu.be/7KUdmFyefSA">https://youtu.be/7KUdmFyefSA</a> - Kubernetes is dropping Docker support - What does it mean for YOU?</p>
<p>Στο παρακάτω post εξηγούνται οι διαφορές Docker &amp; Kuburnetes με παραδείγματα:</p>
<p><a href="https://www.freecodecamp.org/news/kubernetes-vs-docker-whats-the-difference-explained-with-examples/">https://www.freecodecamp.org/news/kubernetes-vs-docker-whats-the-difference-explained-with-examples/</a></p>
<p>Κι αυτό λίγο πιο παλιό :</p>
<p><a href="https://containerjournal.com/topics/container-ecosystems/kubernetes-vs-docker-a-primer/amp/">https://containerjournal.com/topics/container-ecosystems/kubernetes-vs-docker-a-primer/amp/</a></p>
<h2 id="εγκατάσταση">Εγκατάσταση</h2>
<p>Παρατίθενται δύο δημοφιλή post για</p>
<ul>
<li>πως να εγκατασταθεί το docker σε πλατφόρμα Ubuntu, μαζί με παραδείγματα για τη χρήση και δημοφιλείς εντολές για τον docker client <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04</a></li>
<li>πως να εγκατασταθεί το docker-compose σε πλατφόρμα Ubuntu, μαζί με παραδείγματα για τη χρήση και δημοφιλείς εντολές <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04">https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-compose-on-ubuntu-20-04</a></li>
</ul>
<h2 id="networking">Networking</h2>
<p>Παρατίθενται links που εξηγούν πως επικοινωνούν τα containers και πως αυτό μπορεί να ορισθεί μέσω του docker client ή του docker-compose.</p>
<ul>
<li><a href="https://ostechnix.com/explaining-docker-networking-concepts/">https://ostechnix.com/explaining-docker-networking-concepts/</a></li>
<li><a href="https://docs.docker.com/compose/networking/">https://docs.docker.com/compose/networking/</a> Networking in Compose</li>
<li><a href="https://youtu.be/z-ITjDQT7DU">https://youtu.be/z-ITjDQT7DU</a> Linux Bridges, IP Tables, and CNI Plug-Ins, A Container Networking Deepdive</li>
</ul>
<p>Μερικές πολύ καλές παρουσιάσεις από Cisco Live On Demand Library (χρειάζεστε λογαριασμό):</p>
<ul>
<li><a href="https://www.ciscolive.com/global/on-demand-library.html?search=container%20networking#/session/1500302064183001RdRv">https://www.ciscolive.com/global/on-demand-library.html?search=container%20networking#/session/1500302064183001RdRv</a> Demystifying Container Networking, Matthew Johnson (Εξαιρετικός απλά).</li>
<li><a href="https://www.ciscolive.com/global/on-demand-library.html?search=container%20networking#/session/1564346298969001mFaH">https://www.ciscolive.com/global/on-demand-library.html?search=container%20networking#/session/1564346298969001mFaH</a> Container Netwokring Deep Dive, Ivan Kovacevic (Ψυχραιμία εδώ, θα πάθετε πλάκα, αλλά καλύ υπομονή, μας τρέλανε ο τύπος, ήμουν μέσα.. Βαρκελώνη 2020)</li>
</ul>
<h2 id="logging">Logging</h2>
<p>Η παρατήρηση των logs είναι εξίσου σημαντική στην πλατφόρμα docker &amp; docker-compose όσο και στο linux. Αν δεν βλέπεις logs χάνεις τουλάχιστον το 50% της εικόνας</p>
<p><a href="https://sematext.com/blog/docker-logs-location/">https://sematext.com/blog/docker-logs-location/</a></p>
<h2 id="debugging">Debugging</h2>
<p>Τί γίνεται όταν κάτι δεν παέι καλά; Προσωπικά θα διάβαζα κάποιο βιβλίο (π.χ. <a href="https://www.oreilly.com/library/view/troubleshooting-docker/9781783552344/">https://www.oreilly.com/library/view/troubleshooting-docker/9781783552344/</a>) ή θα παρακολουθούσα κάποιο course στη θέση σας, όμως ορίστε ένα μικρό post με σχετικές συμβουλές. Ειδικά το docker top, πολύ σημαντική εντολή.</p>
<p><a href="https://medium.com/@betz.mark/ten-tips-for-debugging-docker-containers-cde4da841a1d">https://medium.com/@betz.mark/ten-tips-for-debugging-docker-containers-cde4da841a1d</a></p>
<p>κι αυτό από τη Digital Ocean:
<a href="https://www-digitalocean-com.cdn.ampproject.org/v/s/www.digitalocean.com/community/tutorials/how-to-debug-and-fix-common-docker-issues.amp?amp_gsa=1&amp;amp_js_v=a6&amp;usqp=mq331AQHKAFQArABIA%3D%3D#amp_tf=From%20%251%24s&amp;aoh=16087631049485&amp;referrer=https%3A%2F%2Fwww.google.com&amp;ampshare=https%3A%2F%2Fwww.digitalocean.com%2Fcommunity%2Ftutorials%2Fhow-to-debug-and-fix-common-docker-issues">https://www-digitalocean-com.cdn.ampproject.org/v/s/www.digitalocean.com/community/tutorials/how-to-debug-and-fix-common-docker-issues.amp?amp_gsa=1&amp;amp_js_v=a6&amp;usqp=mq331AQHKAFQArABIA%3D%3D#amp_tf=From%20%251%24s&amp;aoh=16087631049485&amp;referrer=https%3A%2F%2Fwww.google.com&amp;ampshare=https%3A%2F%2Fwww.digitalocean.com%2Fcommunity%2Ftutorials%2Fhow-to-debug-and-fix-common-docker-issues</a></p>
<p>κι ένα video:</p>
<p><a href="https://www.youtube.com/watch?v=o9uKZBQP1uY"><img src="https://img.youtube.com/vi/o9uKZBQP1uY/0.jpg" alt="IMAGE ALT TEXT HERE"></a></p>
<h2 id="άλλα-χρήσιμα-links----διάβασμα">Άλλα Χρήσιμα links -  Διάβασμα</h2>
<p>Διαβάστε οπωσδήποτε τη σειρά των posts από Julio Gomes και Rodie Hassan. Η πρώτη έχει απίστευτο ταξίδι στον κόσμο του Devops. Η δεύτερη εκτείνεται σε μια σειρά από άρθρα εξειδικευμένα κατά αντικείμενο. Παρατίθενται χωριστά.</p>
<ul>
<li><a href="https://12factor.net/">https://12factor.net/</a> The Twelve Factor App Methodology, Βασικό διάβασμα για να καταλάβει κανείς τί ενέπνευσε αυτή την τεχνολογία.</li>
</ul>
<p>Η Σειρά του Julio Gomez - Programmability Lead in Cisco EMEAR (εκπληκτικός τύπος)</p>
<ul>
<li><a href="https://blogs.cisco.com/developer/why-containers?utm_campaign=docker&amp;utm_source=otwitter&amp;utm_medium=devnet-blogs-juliogomez&amp;linkId=49937033">https://blogs.cisco.com/developer/why-containers?utm_campaign=docker&amp;utm_source=otwitter&amp;utm_medium=devnet-blogs-juliogomez&amp;linkId=49937033</a> - If You’re Not Familiar with Containers, You’re Missing Out on Something Big – DevOps Series, Part 1 by <strong>Julio Gomez</strong></li>
</ul>
<p>Rodie Hasan:</p>
<ul>
<li><a href="https://ccie.tv/fun-with-docker/">https://ccie.tv/fun-with-docker/</a></li>
<li><a href="https://ccie.tv/fun-with-docker-part-2a-getting-started/">https://ccie.tv/fun-with-docker-part-2a-getting-started/</a></li>
<li><a href="https://ccie.tv/fun-with-docker-part-2b-more-getting-started/">https://ccie.tv/fun-with-docker-part-2b-more-getting-started/</a></li>
<li><a href="https://ccie.tv/fun-with-docker-part-3-docker-compose/">https://ccie.tv/fun-with-docker-part-3-docker-compose/</a></li>
<li><a href="https://ccie.tv/fun-with-docker-part-4-docker-volumes/">https://ccie.tv/fun-with-docker-part-4-docker-volumes/</a></li>
<li><a href="https://ccie.tv/fun-with-docker-part-5-docker-networking/">https://ccie.tv/fun-with-docker-part-5-docker-networking/</a></li>
</ul>
<p>Cisco Learning Labs on Devnet (χρειάζεται εγγραφή στο Devnet):</p>
<ul>
<li><a href="https://developer.cisco.com/learning/lab/containers-101/step/1">https://developer.cisco.com/learning/lab/containers-101/step/1</a></li>
<li><a href="https://developer.cisco.com/learning/lab/docker-101/step/1">https://developer.cisco.com/learning/lab/docker-101/step/1</a></li>
</ul>
<p>Docker Cheatsheet (πάλι):</p>
<ul>
<li><a href="https://github.com/wsargent/docker-cheat-sheet">https://github.com/wsargent/docker-cheat-sheet</a></li>
</ul>
<p>Blog Posts &amp; Youtube Videos:</p>
<ul>
<li><a href="https://www.linkedin.com/pulse/introduction-containers-docker-kubernetes-derek-winchester">https://www.linkedin.com/pulse/introduction-containers-docker-kubernetes-derek-winchester</a></li>
<li><a href="https://www.youtube.com/watch?v=2uweFMQCWEs&amp;ab_channel=edureka%21">https://www.youtube.com/watch?v=2uweFMQCWEs&amp;ab_channel=edureka%21</a> - Dockerfile Tutorial Video, Edureka</li>
<li><a href="https://phoenixnap.com/kb/how-to-ssh-into-docker-container">https://phoenixnap.com/kb/how-to-ssh-into-docker-container</a></li>
<li><a href="https://css-tricks.com/a-gentle-introduction-to-using-a-docker-container-as-a-dev-environment/">https://css-tricks.com/a-gentle-introduction-to-using-a-docker-container-as-a-dev-environment/</a></li>
<li><a href="https://www.coursera.org/lecture/sdn/docker-and-containerization-oyA43">https://www.coursera.org/lecture/sdn/docker-and-containerization-oyA43</a></li>
<li><a href="https://dev.to/rohansawant/installing-docker-and-docker-compose-on-the-raspberry-pi-in-5-simple-steps-3mgl">https://dev.to/rohansawant/installing-docker-and-docker-compose-on-the-raspberry-pi-in-5-simple-steps-3mgl</a></li>
<li><a href="https://dev.to/kojikanao/15-docker-commands-for-beginners-4m4d">https://dev.to/kojikanao/15-docker-commands-for-beginners-4m4d</a></li>
<li><a href="https://www.javacodegeeks.com/2018/07/docker-tutorial-containers.html">https://www.javacodegeeks.com/2018/07/docker-tutorial-containers.html</a></li>
<li><a href="https://dev.to/kbk0125/docker-containers-explained-by-renting-office-space-p0o">https://dev.to/kbk0125/docker-containers-explained-by-renting-office-space-p0o</a></li>
<li><a href="https://pythonspeed.com/docker/">https://pythonspeed.com/docker/</a> Production-ready Docker packaging for Python developers</li>
<li><a href="https://www.freecodecamp.org/news/the-docker-handbook/">https://www.freecodecamp.org/news/the-docker-handbook/</a></li>
<li><a href="https://docker.events.cube365.net/docker/dockercon">https://docker.events.cube365.net/docker/dockercon</a></li>
<li><a href="https://sreeninet.wordpress.com/2017/11/02/docker-networking-tip-troubleshooting/amp/">https://sreeninet.wordpress.com/2017/11/02/docker-networking-tip-troubleshooting/amp/</a></li>
<li><a href="https://pythonspeed.com/articles/base-image-python-docker-images/">https://pythonspeed.com/articles/base-image-python-docker-images/</a></li>
</ul>
<p>Καλή επιτυχία!! Αν χρειαστείτε βοήθεια, επικοινωνήστε μαζί μας! Σε επόμενο άρθρο θα μιλήσουμε για χρήση της πλατφόρμας docker &amp; docker-compose στην εγκατάσταση και λειτουργία δημοφιλών λύσεων και εφαρμογών για μηχανικούς ΙΤ.</p>
]]></content>
        </item>
        
        <item>
            <title>How to Get Started With Network Automation</title>
            <link>https://netautogr.github.io/posts/2021/01/how-to-get-started-with-network-automation/</link>
            <pubDate>Thu, 07 Jan 2021 23:02:40 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2021/01/how-to-get-started-with-network-automation/</guid>
            <description>Εισαγωγή Λένε πως το πιο δύσκολο πράγμα στην πτήση είναι η απογείωση.. Στην ενασχόληση με το network automation, αυτο ισχύει σίγουρα. Αν ψάξει κανείς στο internet θα βρει αρκετό περιεχόμενο που έχει σκοπό να αναδείξει κίνητρα, οφέλη, μια νέα φιλοσοφία. Οπωσδήποτε πρέπει κανείς να ανοίξει το μυαλό του σε νέο τρόπο σκέψης, εργασίας και συνεργασίας με αρκετά νέα εργαλεία και τεχνογνωσία. Αλλά το βασικό πρόβλημα δεν είναι η φιλοσοφία. Εντάξει, παίζει σημαντικό ρόλο.</description>
            <content type="html"><![CDATA[<h2 id="εισαγωγή">Εισαγωγή</h2>
<p>Λένε πως το πιο δύσκολο πράγμα στην πτήση είναι η απογείωση.. Στην ενασχόληση με το network automation, αυτο ισχύει σίγουρα.
Αν ψάξει κανείς στο internet θα βρει αρκετό περιεχόμενο που έχει σκοπό να αναδείξει κίνητρα, οφέλη, μια νέα φιλοσοφία.
Οπωσδήποτε πρέπει κανείς να ανοίξει το μυαλό του σε νέο τρόπο σκέψης, εργασίας και συνεργασίας με αρκετά νέα εργαλεία και τεχνογνωσία.
Αλλά το βασικό πρόβλημα δεν είναι η φιλοσοφία. Εντάξει, παίζει σημαντικό ρόλο. Αν όμως κάποιος έχει φτάσει μέχρι εδώ, σημαίνει ότι έχει ήδη πειστεί σε κάποιο βαθμό ότι κάτι πρέπει ή κάτι θέλει να κάνει. Αυτό που χρειάζεται είναι να του εξηγήσει κάποιος τί είναι αυτό το &ldquo;κάτι&rdquo;, τί συμβαίνει εκεί έξω και τί είναι διαθέσιμο και από που να αρχίσει.</p>
<h2 id="σκοπός">Σκοπός</h2>
<p>Ο σκοπός του κειμένου αυτού δεν είναι να υποδείξει τα use cases για κάθε εργαλείο για κάθε <em>&ldquo;network automation engineer&rdquo;</em>. Αυτό είναι αδύνατο. Ο βασικός σκοπός είναι ο καινούριος εκπαιδευόμενος να μάθει για τα εργαλεία και τις τεχνολογίες στη διάθεση του. Γνωρίζοντας αυτά, εκείνος ή εκείνη θα μπορέσει να αναγνωρίσει το τί ακριβώς ταιριάζει σαν λύση στα προβλήματα που μόνο εκείνος γνωρίζει για το περιβάλλον του.</p>
<h2 id="βασικά-σημεία-εκκίνησης">Βασικά σημεία εκκίνησης</h2>
<p>Υπάρχουν αρκετά blog posts στο internet πλέον για συγκεκριμένα use cases, όπως και ανοικτές κοινότητες, είτε οργανωμένες από network &amp; system vendors (Cisco, Juniper, Vmware, Redhat, κλπ) είτε ανεξάρτητες ομάδες οργανωμένες γύρω από κάποιο εργαλείο. Σε κάποιες από αυτές θα βρείτε βάσεις δεδομένων με use cases.
Συμμετέχοντας σε κάποιες κοινότητες (όπως αυτήν εδώ) ενδεχομένως θα σας δοθεί η ευκαιρία να μιλήσετε με κάποιους που έχουν κάνει ήδη κάτι κοντά σε αυτό που θέλετε να πετύχετε.</p>
<p>Όμως το πεδίο είναι ακόμα παρθένο. Υπάρχει αρκετός χώρος για καινοτομία. Οπότε, αν δεν βρίσκετε άμεσα αυτό ακριβώς που θέλετε, υπομονή. Από την άλλη ίσως σας δοθεί η ευκαιρία να αναπτύξετε κάτι κι εσείς!</p>
<h2 id="κι-αν-θέλω-οπωσδήποτε-συμβουλές"><em>&ldquo;Κι αν θέλω οπωσδήποτε συμβουλές;&quot;</em></h2>
<p>Τότε θα πρέπει να αναζητήσετε blog posts σχετικά με το γιατί και το πως:</p>
<ul>
<li>Why automate
<ul>
<li><a href="https://www.juniper.net/us/en/dm/infographic/four-reasons-to-automate/">https://www.juniper.net/us/en/dm/infographic/four-reasons-to-automate/</a></li>
<li><a href="https://www.redhat.com/en/topics/automation">https://www.redhat.com/en/topics/automation</a></li>
<li><a href="https://www.cisco.com/c/en/us/solutions/automation/network-automation.html">https://www.cisco.com/c/en/us/solutions/automation/network-automation.html</a></li>
</ul>
</li>
<li>How to get started
<ul>
<li><a href="https://www.rogerperkin.co.uk/network-automation/how-to-learn/">https://www.rogerperkin.co.uk/network-automation/how-to-learn/</a></li>
<li><a href="https://blog.danielteycheney.com/posts/starting-your-network-automation-journey/">https://blog.danielteycheney.com/posts/starting-your-network-automation-journey/</a></li>
<li><a href="https://www.ipspace.net/kb/NetAutJourney/">https://www.ipspace.net/kb/NetAutJourney/</a></li>
</ul>
</li>
<li>Introduction Videos - Προτείνω τη σειρά NetDevOps Live
<ul>
<li><a href="https://developer.cisco.com/netdevops/live/">https://developer.cisco.com/netdevops/live/</a></li>
<li><a href="https://www.youtube.com/watch?v=_6ZoQ1QRw7I&amp;list=PL2k86RlAekM-0_lErsVdS_xqQMLYRcdhU">https://www.youtube.com/watch?v=_6ZoQ1QRw7I&amp;list=PL2k86RlAekM-0_lErsVdS_xqQMLYRcdhU</a></li>
<li><a href="https://www.youtube.com/playlist?list=PL2k86RlAekM8AVJ4i_spFJfSHknNMGOkI">https://www.youtube.com/playlist?list=PL2k86RlAekM8AVJ4i_spFJfSHknNMGOkI</a></li>
</ul>
</li>
</ul>
<p>Δείτε και τις προτάσεις για <em>What to read next</em> στο τέλος του άρθρου.</p>
<p>Βασικά πάρτε απόφαση ότι δεν είναι δυνατό ξαφνικά να τα μάθετε όλα, όπως και δεν είναι δυνατό, αν θέλετε πρακτικά αποτελέσματα, να μάθετε πρώτα &ldquo;τέλεια&rdquo; ένα εργαλείο ή μια τεχνολογία και μετά να την εφαρμόσετε στην πράξη για να λύσετε κάποιο πρόβλημα που σας απασχολεί.</p>
<p>Κάντε μικρά βήματα, και μην φοβάστε το &ldquo;πασάλειμμα&rdquo;. Στην ουσία ακολουθήστε το μονοπάτι &ldquo;learn by doing&rdquo;. Θα μπορέσετε να έχετε σύντομα μικρές νίκες, οι οποίες θα σας δώσουν ενέργεια για να συνεχίσετε την προσπάθεια και να εμβαθύνετε. Και μετά αποφασίζετε για την τελική σας κατεύθυνση. Το βασικό ερώτημα, είναι αυτό που ακολουθεί:</p>
<h3 id="to-code-or-not-to-code">To code or not to code</h3>
<p>Πολλοί διαχωρίζουν τα τεχνολογικά εργαλεία για το network automation σε αυτά που απαιτούν γνώσεις γλώσσας προγραμματισμού και σε αυτά που χρησιμοποιούν περιγραφικές γλώσσες συγκεκριμένου πεδίου εφαρμογής, τις λεγόμενες <em>DSL</em> (Domain Specific Language). Με αυτό το σκεπτικό πολλές φορές διαλέγουν αυτό που θεωρούν κατάλληλο ανάλογα με το περιβάλλον της εφαρμογής του εργαλείου, π.χ. ανάλογα με τις προγραμματιστικές γνώσεις και ικανότητες αυτών που θα το χρησιμοποιήσουν.</p>
<h4 id="to-code---devices">To Code - Devices</h4>
<p>Στην πρώτη περίπτωση μπορεί κανείς να χρησιμοποιήσει διάφορες γλώσσες για να &ldquo;μιλήσει&rdquo; με δικτυακό εξοπλισμό ή με REST APIs (API - Application Programming Interface, REST - REpresentational State Transfer) εργαλείων λογισμικού που συνήθως χρησιμοποιούνται για τη διαχείριση δικτυακών υπηρεσιών και συσκευών ή άλλους σκοπούς, όπως π.χ. Cisco Prime Infrastructure, ή Cisco DNA, Cisco SD-WAN, Cisco Meraki, Netbox, κλπ.
Οι πιο διαδεδομένες επιλογές για την πρώτη περίπτωση είναι οι Python &amp; Go, αλλα είναι δυνατό να χρησιμοποιήσει κανείς και άλλες, όπως Perl &amp; TCL.
Στο παρακάτω άρθρο, αναφέρονται 5 γλώσσες με την πέμπτη επιλογή να είναι η Ansible, εσφαλμένα κατά τη γνώμη μου καθώς δεν είναι γλώσσα προγραμματισμού:
<a href="https://www.techrepublic.com/article/5-programming-languages-network-architects-should-learn/">https://www.techrepublic.com/article/5-programming-languages-network-architects-should-learn/</a></p>
<h4 id="to-code---rest-apis">To Code - (REST) APIs</h4>
<p>Ο πιο απλός τρόπος να εξερευνήσει κάποιος ένα API είναι ή με ενσωματωμένο documentation όπως είναι το swagger interface, ή με εφαρμογές που μπορούν να κάνουν API requests χωρίς να χρησιμοποιούν προγραμματιστικό κώδικα. Τέτοιες εφαρμογές ονομάζονται REST Clients, και μια από τις πιο γνωστές είναι ο <strong><a href="https://www.postman.com">Postman</a></strong></p>
<p>O Postman μπορεί να δημιουργήσει API calls συμπληρώνοντας απλώς URLs και επιλογές στο γραφικό του περιβάλλον και να μετατρέψει αυτό to request σε κώδικα για διάφορες γλώσσες, π.χ. python, java, javascript, C, C#, PHP, Ryby, Swift, κλπ. Έτσι μπορείτε άμεσα να δείτε πως θα μπορούσε να είναι ένα request στη γλώσσα προγραμματισμού που σας ενδιαφέρει.</p>
<p>Σε περίπτωση που θέλει κανείς να επενδύσει σε μια γλώσσα προγραμματισμού για να κάνει REST API calls, υπάρχουν περισσότερες επιλογές για γλώσσες, π.χ. python, java, javascript, κλπ αλλά θα ανταμοιφθεί αν επιλέξει τη γλώσσα Python για να το κάνει, καθώς του δίνεται αρκετή ευελιξία. Ο πιο διαδεδομένος τρόπος είναι με τη χρήση της βιβλιοθήκης requests, είτε χρησιμοποιώντας http/https sessions είτε μεμονωμένα requests. Υπάρχουν όμως κι άλλες επιλογές, όπως η βιβλιοθήκη httpx, η οποία γνωρίζει αρκετή εφαρμογή τελευταία.</p>
<ul>
<li><em>What is a REST API</em> - <a href="https://youtu.be/lsMQRaeKNDk">https://youtu.be/lsMQRaeKNDk</a></li>
<li><em>REST API concepts and examples</em> - <a href="https://youtu.be/7YcW25PHnAA">https://youtu.be/7YcW25PHnAA</a></li>
</ul>
<h4 id="not-to-code">Not to code?</h4>
<p>Δεν σας αρέσει ο προγραμματισμός; Προσωπική μου άποψη, καλύτερα να αλλάξετε γνώμη αλλά αν επιμένετε υπάρχουν διάφορα εργαλεία που μπορείτε να χρησιμοποιήσετε. Θα πρέπει ωστόσο να επενδύσετε χρόνο να μάθετε την περιγραφική αυτή γλώσσα και ένα λεξιλόγιο που δεν θα είναι μεν γλώσσα προγραμματισμού αλλά θα έχει συντακτικό και γενικά δομή και κανόνες.
Τέτοια εργαλεία είναι π.χ. το <strong>Ansible</strong>, το <strong>Cheff</strong>, το <strong>Puppet</strong> και άλλα.
Το πιο εύκολο για να αρχίσετε να ασχολείστε είναι το Ansible αλλά είναι καθαρά θέμα προσωπικής επιλογής από ένα σημείο και μετά.
To Ansible είναι εργαλείο που κατασκευάστηκε και αναπτύσσεται/συντηρείται από τη Redhat, χρησιμεύει για αυτοματισμό σε διάφορους τομείς, από servers και services, μέχρι http/rest API calls, μέχρι network devices &amp; services και πολλά άλλα, ενώ μπορεί να εγκατασταθεί σε περιβάλλοντα Linux αλλά τελευταία είναι δυνατή και η εγκατάσταση του σε περιβάλλοντα Windows. Έχουμε ήδη ένα post σχετικά με το Ansible και θα υπάρξουν κι άλλα. Για να μάθετε περισσότερα κατευθυνθείτε αρχικά εδώ</p>
<ul>
<li><a href="https://www.ansible.com/">https://www.ansible.com/</a></li>
<li><a href="https://www.ansible.com/resources/get-started">https://www.ansible.com/resources/get-started</a></li>
</ul>
<p>και θα εμπλουτίσουμε το περιεχόμενο σιγά - σιγά γι αυτό. Το Ansible είναι free για εγκατάσταση και χρήση αλλά υπάρχει εταιρική έκδοση μιας πλατφόρμας διαχείρισης του από τη Redhat, γνωστή με το όνομα <a href="https://www.ansible.com/products/tower">Ansible Tower</a></p>
<h3 id="cloud">Cloud?</h3>
<p>Δεν είμαι ειδικός. Υπάρχει μεγάλη δυνατότητα να αυτοματοποιήσετε τις λειτουργίες που χρησιμοποιείτε με cloud services ανάλογα με τις δυνατότητες που δίνει ο cloud provider, μην ξεχνάτε πως οτιδήποτε θεωρείτε ότι λειτουργεί στο cloud είναι στην ουσία software applications, ενδεχομένως ακόμα και βασικές δικτυακές λειτουργίες. Πολύ δημοφιλές εργαλείο είναι το <strong>Terraform</strong> της Hashicorp για το οποίο όλοι ελπίζουμε ο Ν.Κ. να μας μάθει λίγα πράγματα.
Προς το παρόν κρατήστε τα παρακάτω:</p>
<ul>
<li><a href="https://www.terraform.io/intro/index.html">https://www.terraform.io/intro/index.html</a></li>
<li><a href="https://learn.hashicorp.com/tutorials/terraform/automate-terraform">https://learn.hashicorp.com/tutorials/terraform/automate-terraform</a></li>
</ul>
<h3 id="άγνωστες-λέξεις---buzz-words">Άγνωστες λέξεις - Buzz Words</h3>
<p>Έχετε λοιπόν αποφασίσει να αρχίσετε να ασχολείστε με Network Automation και με την πρώτη φορά που αρχίζετε να διαβάζετε κάποιο κείμενο ή να δείτε κάποιο video, βομβαρδίζεστε με άγνωστες λέξεις:</p>
<h4 id="parsing"><em>Parsing</em></h4>
<p>Όταν χρησιμοποιούμε εργαλεία για να επικοινωνήσουμε με συσκευές ή (REST) APIs, συνήθως λαμβάνουμε απαντήσεις στις εντολές μας ή στα API Calls μας οι οποίες είναι με μορφή STRING (σειρές χαρακτήρων), ή χρησιμοποιώντας πιο απλή ορολογία, κείμενο. Φανταστείτε το κείμενο που παίρνετε ως απάντηση σε μια κονσόλα δικτυακής συσκευής. Σαν μηχανικοί έχετε μάθει να το ερμηνεύετε. Για να είναι όμως αξιοποιήσημο προγραμματιστικά, ώστε πχ. να το συνδυάσετε με άλλα δεδομένα ή να το κάνετε δεδομένα εισαγωγής για άλλα εργαλεία ή να ελέγξετε αν ισχύει κάποιο ενδεχόμενο κλπ, πρέπει να περάσετε αυτό το κείμενο από ειδικά φίλτρα ώστε να απομονώσετε τις πληροφορίες που σας ενδιαφέρουν και τις οποίες ο κώδικας σας ή το DSL-based εργαλείο σας θα αναγνωρίσει και θα επεξεργαστεί. Σε αυτές τις περιπτώσεις έχει κανείς δύο επιλογές:</p>
<ul>
<li>Εφαρμογή Regular Expressions - γνωστό και ως RegEx, υπάρχει δυνατότητα χρήσης του και σε γλώσσες όπως η Python αλλά και σε DSL-Based εργαλεία, με πλεονέκτημα τη μεγάλη αποτελεσματικότητα και ακρίβεια (αν χρησιμοποιηθεί σωστά) και μεινονεκτήματα την πολυπλοκότητα στην εκμάθηση και τη χρήση.</li>
<li>Χρήση προκατασκευασμένων φίλτρων γνωστών ως parsers, οι οποίοι έχουν προδιαγεγραμμένα πρότυπα ώστε να αναγνωρίζουν και να απομονώνουν δεδομένα ανάλογα με συγκεκριμένες εντολές και requests. Π.χ. μια εντολή
<pre><code class="language-cisco" data-lang="cisco">show ip interfaces
</code></pre><p>χρειάζεται parser ειδικά κατασκευασμένο γι αυτή ο οποίος θα δώσει αυτόματα τις απαντήσεις χωρισμένες σε συγκεκριμένα πεδία δεδομένων. Σας μπέρδεψα; Λογικό. Χρειάζεται να δείτε παραδείγματα. Σύντομα σε ξεχωριστό άρθρο. Προς το παρόν κρατήστε ότι η απάντηση από την παραπάνω εντολή μπορεί να μας ενδεχομένως να μας δώσει σε ξεχωριστές μεταβλητές το όνομα και τον τύπο του interface, την ip address και την network mask, το αν είναι ενεργό ή όχι, κλπ, ώστε να μπορούμε να τις επεξεργαστούμε για να εφαρμόσουμε την αυτοματοποιημένη λογική που επιθυμούμε. Γνωστοί parsers με τη μορφή βιβλιοθηκών python, είναι οι text-fsm/ntc, pyats/genie, ttp. Υπάρχει δυνατότητα χρήσης κάποιων από αυτούς και από DSL-based εργαλεία.</p>
</li>
</ul>
<h4 id="json-xml-yang"><em>JSON, XML, Yang</em></h4>
<p>Η χρήση σκέτων strings για την αποθήκευση δεδομένων προφανώς δεν είναι πρακτική και αξιόπιστη. Σε πολλές περιπτώσεις βολεύει να κωδικοποιήσουμε τα δεδομένα με συγκεκριμένο τρόπο, ώστε να είναι πιο πρακτική η αποθήκευση και η ανάκτηση τους και να μπορούμε με μονοσήμαντο και αποτελεσματικό τρόπο να φτάσουμε ακριβώς στα δεδομένα που μας ενδιαφέρουν. To JSON - Javascript Syntax Notation και το XML - eXtensible Markup Language είναι τρόποι κωδικοποίησης δεδομένων, ο καθένας με τα πλεονεκτήματα και μειονεκτήματα του.
Η γλώσσα Yang χρησιμοποιείται για την αναπαράσταση μοντέλων δεδομένων (data models) με σκοπό να μπορούμε αποτελεσματικά να περιγράψουμε και να αποθηκεύσουμε δεδομένα σε ψηφιακή μορφή, όπου αποστολέας και παραλήπτης των δεδομένων έχουν ήδη κοινή γνώση για την αναμενόμενη μορφή των αποθηκευμένων δεδομένων και των κανόνων που τα διέπουν. Περισσότερα γι αυτά σε ξεχωριστό άρθρο, μαζί με τις επόμενες άγνωστες λέξεις</p>
<h4 id="netconf-restconf"><em>Netconf, Restconf</em></h4>
<p>Πρωτόκολλα για την διαχείριση και ρύθμιση συσκευών/λογισμικών χρησιμοποιώντας συγκεκριμένα (Yang) data models που υποστηρίζουν αυτές ώστε να καθορίσουμε ακριβώς και με αποδοτικότερο τρόπο τις παραμέτρους λειτουργίας τους και να πάρουμε πληροφορίες σχετικά με την κατάσταση και την απόδοση τους. Κάθε ένα από αυτά υποστηρίζει συγκεκριμένους τρόπους κωδικοποίησης των δεδομένων και λειτουργεί με συγκεκριμένη τεχνολογία για την ασφαλή μεταφορά των δεδομένων μεταξύ πηγής και παραλήπτη.</p>
<h4 id="connection-providers"><em>Connection Providers</em></h4>
<p>Συνήθως βιβλιοθήκες γλωσσών προγραμματισμού για τη σύνδεση με δικτυακές συσκευές ή άλλα συστήματα (π.χ. firewalls ή servers).
Εφόσον μιλάμε για συσκευές σαν τις παραπάνω διακρίνονται</p>
<ul>
<li>σε αυτούς που χρησιμοποιούν <em>legacy</em> τρόπους σύνδεσης, π.χ. πάνω από SSH/Telnet. Γνωστότερες περιπτώσεις είναι τα netmiko, napalm, scrapli (και pyats, αναφέρεται ξεχωριστά για λόγους που θα αναφερθούν παρακάτω)</li>
<li>σε αυτούς που χρησιμοποιούν τα γνωστά πρωτόκολλα Netconf/Restconf και Yang data models. Γνωστότερες περιπτώσεις είναι τα ncc, netconf-scrapli, http requests/httpx</li>
</ul>
<h4 id="network-testing-framerworks"><em>Network Testing Framerworks</em></h4>
<p>Αν και θα μπορούσαμε ενδεχομένως να μιλήσουμε γενικά για testing, εδώ κάνουμε ειδική αναφορά στο network testing framework, το οποίο η Cisco χρησιμοποιεί εσωτερικά εδώ και πάνω από 10 χρόνια, ενώ εδώ και 4 χρόνια το έχει ανοίξει για χρήση από όλους ως ανοικτό λογισμικό: Pyats/Genie</p>
<ul>
<li><a href="https://developer.cisco.com/docs/pyats/">https://developer.cisco.com/docs/pyats/</a></li>
<li><a href="https://developer.cisco.com/pyats/">https://developer.cisco.com/pyats/</a></li>
</ul>
<p>To PyATS έχει multi-layered αρχιτεκτονική όπου κάθε layer μπορεί να χρησιμοποιηθεί ανεξάρτητα από τα άλλα και διαθέτει και ικανότητες parsing με χιλιάδες parsers και μοντέλα για συσκευές από πολλούς διαφορετικούς κατασκευαστές πέραν της Cisco. Εδώ και μεγάλο διάστημα έχει ανακοινωθεί και διατεθεί και η πλατφόρμα διαχείρισης του με γραφικό τρόπο με πολλες έξτρα δυνατότητες, το <strong>XPRESSO</strong> το οποίο είναι στην ουσία ένα PyATS Dashboard</p>
<ul>
<li><a href="https://xpresso-sjc-1.cisco.com/home">https://xpresso-sjc-1.cisco.com/home</a></li>
<li><a href="https://developer.cisco.com/docs/pyats/#!pyats-dashboard-xpresso">https://developer.cisco.com/docs/pyats/#!pyats-dashboard-xpresso</a></li>
</ul>
<h4 id="concurrencyparallelismparallel-execution--configuration"><em>Concurrency/Parallelism/Parallel Execution &amp; Configuration</em></h4>
<p>Χωρίς να μπούμε σε λεπτομέρειες που θα μας δώσουν με ακρίβεια τον ορισμό των παραπάνω, ας παραμείνουμε στην ουσία που είναι ότι μπορείτε με κάποια εργαλεία να εκτελέσετε ομάδες ενεργειών παράλληλα σε ένα μεγάλο αριθμό από συσκευές, αν ο αριθμός τους είναι τέτοιος ώστε να έχει νόημα να κερδίσετε αρκετό χρόνο με την &ldquo;παράλληλη&rdquo; εκτέλεση της ίδιας δέσμης ενεργειών σε όλες. Τέτοια frameworks που επιτρέπουν κάτι τέτοιο είναι τα</p>
<ul>
<li>Nornir (Python Based, μπορεί να χρησιμοποιήσει διάφορουης connection providers)</li>
<li>PyATS (Python Based, own connection provider)</li>
<li>Ansible</li>
</ul>
<p>Και εδώ θα δούμε το αντικείμενο αυτό σε ξεχωριστό άρθρο. Κάποια links ειδικά για το Nornir:</p>
<ul>
<li><a href="https://nornir.readthedocs.io/en/latest/">https://nornir.readthedocs.io/en/latest/</a></li>
<li><a href="https://nornir.readthedocs.io/en/latest/tutorial/overview.html">https://nornir.readthedocs.io/en/latest/tutorial/overview.html</a></li>
<li><a href="https://github.com/nornir-automation/nornir/discussions">https://github.com/nornir-automation/nornir/discussions</a></li>
</ul>
<h4 id="devops-netdevops-containers-docker-kubernetes-microservices-cicd-"><em>DevOps, NetDevOps, Containers, Docker, Kubernetes, Microservices, CI/CD, &hellip;</em></h4>
<p>Ψυχραιμία. Σιγά - Σιγά. Τα παραπάνω είναι συστατικά μιας νέας κουλτούρας για ανάπτυξη εφαρμογών όσο αφορά στο network automation αλλά στον κόσμο των developpers δεν είναι τόσο καινούρια. Κρατήστε ότι όλα αυτά έχουν να κάνουν με Coding Methodologies και Development Projects από ομάδες συνεργατών, τα οποία θα εξετάσουμε σιγά - σιγά. Θα αποφύγουμε να μετατρέψουμε το συγκεκριμένο post σε Καζαμία του Automation και σας δίνουμε ραντεβού σε επόμενα post για περισσότερες εξηγήσεις για τα συγκεκριμένα. Δεν είναι σίγουρα κάτι που θα ασχοληθείτε τον πρώτο καιρό που θα κάνετε επαφή με το αντικείμενο.</p>
<h2 id="τελειώσαμε"><em>&ldquo;Τελειώσαμε;&quot;</em></h2>
<p>Με τίποτε. Απλώς αρχίζουμε. Είπαμε, υπομονή. Αν έχετε διαβάσει ως εδώ, είτε με την πρώτη, είτε γενικά, μάλλον έχετε υπομονή. Σας υπόσχομαι ότι αξίζει τον κόπο.</p>
<h2 id="ωραία-όλα-αυτά-και-τώρα-τί-κάνω-εγώ"><em>&ldquo;Ωραία όλα αυτά.. Και τώρα τί κάνω εγώ;&quot;</em></h2>
<p>Είπαμε και στην αρχή κάποια πράγματα. Ακολουθούν προτάσεις:</p>
<h2 id="αναζητήστε-κοινότητες-και-ενημέρωση">Αναζητήστε κοινότητες και ενημέρωση</h2>
<h3 id="άναρχα">Άναρχα</h3>
<p>Μπορείτε να ψάξετε σε μέσα δικτύωσης όπως το Twitter ή το LinkedIn για άτομα και groups που ασχολούνται με αυτά τα αντικείμενα ώστε να φτιάξετε σιγά-σιγά ένα κύκλο ενημέρωσης και συζήτησης. Παίρνει χρόνο αλλά αξίζει τον κόπο. Βοηθάει η χρήση των hashes (#) σε αυτη την περίπτωση. Κάντε σχετικές αναζητήσεις ή ρωτήστε και εμάς.</p>
<h3 id="οργανωμένα">Οργανωμένα</h3>
<p>Υπάρχουν αρκετές κοινότητες από απλούς μηχανικούς χωρίς δεσμεύσεις και προτιμήσεις (σαν και τη δικιά μας κοινότητα). Άλλες οργανώνονται γύρω από discussion sites/tools όπως το Slack, άλλες με εργαλεία σαν το discorde, άλλες με podcasts κλπ.</p>
<h3 id="blogs">Blogs</h3>
<h4 id="automate-your-network---john-capobianco">Automate your Network - John Capobianco</h4>
<p>Υπάρχουν blogs που είναι επικεντρωμένα στο automation. Θα ξεκινήσουμε με ένα που δεν είναι το πιο αντιπροσωπευτικό για όλα, ανήκει όμως σε έναν παθιασμένο automation μηχανικό που είναι φανατικός υποστηρικτής του Ansible και chief technologist στη Βουλή του Καναδά. Το ιδιαίτερο σε αυτή την περίπτωση έγκειται επίσης στο ότι έχει πολύ πρόσφατα συγκεντρώσει σε μία σελίδα links για blogs, github repos, community pages κλπ, όπου φιλοξενείται πλέον σύνδεσμος και για την δική μας κοινότητα:</p>
<ul>
<li><a href="https://www.automateyournetwork.ca/">https://www.automateyournetwork.ca/</a></li>
<li><a href="https://www.automateyournetwork.ca/community-links/">https://www.automateyournetwork.ca/community-links/</a></li>
</ul>
<h4 id="python-for-network-engineers---kirk-byers">Python for Network Engineers - Kirk Byers</h4>
<p><a href="https://pynet.twb-tech.com/">https://pynet.twb-tech.com/</a> - Ο Kirk Byers είναι μηχανικός δικτύων με εξαιρετικές γνώσεις τόσο γύρω από Python όσο και το Ansible και εκτός από το περιεχόμενο στο site του, διαθέτει δωρεάν ένα email course για Python ειδικά για Network Engineers, όπου κάνει γρήγορη εισαγωγή στη γλώσσα και στη συνέχεια εξηγεί πως μπορεί κανείς να συνδεθεί προγραμματιστικά σε συσκευές χρησιμοποιώντας τη βιβλιοθήκη Netmiko για τη γλώσσα Python, η οποία υποστηρίζει συνδέσεις μέσω SSH &amp; Telnet. To Netmiko υποστηρίζει και τη χρήση parsers για να παίρνετε δεδομένα σε δομημένη μορφή, είτε με τη χρήση textfsm/ntc είτε με χρήση PyATS/Genie. Το επόμενο free course αρχίζει στις 2 Μαρτίου, μπορείτε να γραφτείτε εδώ:</p>
<p><a href="https://pynet.twb-tech.com/email-signup.html">https://pynet.twb-tech.com/email-signup.html</a></p>
<p>Τα paid courses αφορούν Python (Advanced), Ansible &amp; Nornir. Σας συμβουλεύω να γραφτείτε το στο email course το οποίο περιλαμβάνει κείμενο, παραδείγματα και video από την πλατφόρμα Vimeo.</p>
<h4 id="nwmichl-blog">NWMichl Blog</h4>
<p><a href="https://nwmichl.net/">https://nwmichl.net/</a> - O Michael Shoen είναι ένας εξαιρετικός μηχανικός, χωρίς ίχνος ματαιοδοξίας, και πολύ καταρτισμένος σχεδόν σε κάθε τεχνικό πεδίο που αφορά τον αυτοματισμό.</p>
<h4 id="ttl255---przemek-rogalas-blog">TTL255 - Przemek Rogala&rsquo;s blog</h4>
<p><a href="https://ttl255.com/">https://ttl255.com/</a> - Ο Przemek έχει ιδιαίτερο ταλέντο να συνδυάζει δικτυακά θέματα με κομμάτια automation υψηλών απαιτήσεων, όπως η σειρά του για jinja templates, ή για το Python SDK Pynetbox που χρησιμεύει για τη διευκόλυνση της διαχείρισης του API του Netbox.</p>
<h4 id="network-to-code---ntc">Network to Code - NTC</h4>
<p><a href="https://blog.networktocode.com/">https://blog.networktocode.com/</a> - Η εταιρεία που δημιουργήθηκε από ένα slack channel και κατέληξε να είναι ίσως η καλύτερη εταιρεία consulting για network automation.</p>
<h4 id="cisco-developer-blog">Cisco Developer Blog</h4>
<p><a href="https://blogs.cisco.com/developer">https://blogs.cisco.com/developer</a> - Το κομμάτι των Cisco Blogs που αφορά στο NetDevOps και το Network Automation. Θα βρείτε εκεί και κάποια blog posts από μηχανικούς της κοινότητας μας ;)</p>
<h4 id="real-python-tutorials">Real Python Tutorials</h4>
<p><a href="https://realpython.com/">https://realpython.com/</a> - Εξαιρετικό site όπου μπορείτε να βρείτε blog posts και videos οργανωμένα θεματικά για το πως να κάνετε συγκεκριμένα πράγματα με τον Python, πως να δουλέψετε με αρχεία, ή πως να δημιουργήσετε και να στείλετε emails, πως να διαβάσετε αρχεία κειμένου ή excel, κλπ. Έχει και δυνατότητα subscription για πιο προχωρημένα πράγματα.</p>
<h3 id="ψάξτε-για-εκπαίδευση">Ψάξτε για εκπαίδευση</h3>
<h4 id="vendor-backed-sites">Vendor backed Sites</h4>
<ul>
<li>Cisco Devnet -  <a href="https://developer.cisco.com/">https://developer.cisco.com/</a> - Γραφτείτε στο πρόγραμμα στης Cisco για το δικτυακό αυτοματισμό και θα αποκτήσετε πρόσβαση σε μεγάλο αριθμό από resouces.
Τί είναι το Cisco Devnet; Δείτε αυτό <a href="https://youtu.be/YuCgIUORimU">https://youtu.be/YuCgIUORimU</a>
<ul>
<li>Cisco Devnet Learning Tracks - Περιεχόμενο για εκμάθηση οργανωμένο ανά περιοχή - <a href="https://developer.cisco.com/learning/tracks">https://developer.cisco.com/learning/tracks</a></li>
<li>Cisco Devnet Learning Labs - Περιεχόμενο που λειτουργεί σε συνδυασμό με εργαστήρια στο Cloud της Cisco (Sandboxes) - <a href="https://developer.cisco.com/learning/labs">https://developer.cisco.com/learning/labs</a></li>
<li>Cisco Devnet Sandboxes - <a href="https://developer.cisco.com/site/sandbox/">https://developer.cisco.com/site/sandbox/</a></li>
<li>Cisco Devnet Sandbox Catalog - <a href="https://devnetsandbox.cisco.com/RM/Topology">https://devnetsandbox.cisco.com/RM/Topology</a></li>
</ul>
</li>
<li>Cisco Learning Network - <a href="https://learningnetwork.cisco.com/s/">https://learningnetwork.cisco.com/s/</a>
<ul>
<li>Cisco Devnet Associate Prep Program - <a href="https://learningnetwork.cisco.com/s/learning-plan-detail-standard?ltui__urlRecordId=a1c3i0000007q9cAAA">https://learningnetwork.cisco.com/s/learning-plan-detail-standard?ltui__urlRecordId=a1c3i0000007q9cAAA</a></li>
<li>Cisco SDN Training Videos - <a href="https://learningnetwork.cisco.com/s/learning-plan-detail-standard?ltui__urlRecordId=a1c3i0000005hZzAAI">https://learningnetwork.cisco.com/s/learning-plan-detail-standard?ltui__urlRecordId=a1c3i0000005hZzAAI</a></li>
</ul>
</li>
<li>Juniper - <a href="https://learningportal.juniper.net/juniper/user_activity_info.aspx?id=11478">https://learningportal.juniper.net/juniper/user_activity_info.aspx?id=11478</a></li>
<li>Redhat - <a href="https://www.redhat.com/en/blog/red-hat-provides-free-learning-opportunities">https://www.redhat.com/en/blog/red-hat-provides-free-learning-opportunities</a></li>
<li>Vmware Kubernetes Academy - <a href="https://kube.academy/">https://kube.academy/</a></li>
<li>Hashicorp - <a href="https://learn.hashicorp.com/">https://learn.hashicorp.com/</a></li>
<li>Checkpoint - <a href="https://sc1.checkpoint.com/documents/latest/APIs/#introduction~v1.7%20">https://sc1.checkpoint.com/documents/latest/APIs/#introduction~v1.7%20</a></li>
</ul>
<h4 id="learning-platforms">Learning Platforms</h4>
<ul>
<li>Pluralsight - <a href="https://www.pluralsight.com/">https://www.pluralsight.com/</a></li>
<li>O&rsquo;Reilly Online - <a href="https://www.oreilly.com/online-learning/">https://www.oreilly.com/online-learning/</a></li>
<li>Udemy - <a href="https://www.udemy.com/">https://www.udemy.com/</a></li>
<li>GNS3 Academy - <a href="https://gns3.teachable.com/">https://gns3.teachable.com/</a></li>
<li>Codemy - <a href="https://codemy.com/">https://codemy.com/</a></li>
<li>CBT Nuggets - <a href="https://www.cbtnuggets.com/">https://www.cbtnuggets.com/</a></li>
<li>LinkedIn - Η παλιά πλατφόρμα Linda.com - <a href="https://www.cbtnuggets.com/">https://www.cbtnuggets.com/</a></li>
<li>Pact - <a href="https://www.packtpub.com/free-learning">https://www.packtpub.com/free-learning</a></li>
<li>IpSpace.net - Η πλατφόρμα του Ivan Pelpejnak - <a href="https://www.ipspace.net/Main_Page">https://www.ipspace.net/Main_Page</a></li>
</ul>
<h4 id="youtube">Youtube</h4>
<p><a href="https://www.youtube.com/">https://www.youtube.com/</a></p>
<h3 id="αναζητήστε-use-cases">Αναζητήστε Use Cases</h3>
<h4 id="special-websitessearch-engines">Special Websites/Search Engines</h4>
<ul>
<li>Cisco Devnet Code Exchange - <a href="https://developer.cisco.com/codeexchange/">https://developer.cisco.com/codeexchange/</a></li>
<li>Cisco Devnet Automation Exchange - <a href="https://developer.cisco.com/network-automation/">https://developer.cisco.com/network-automation/</a></li>
</ul>
<h4 id="github">Github</h4>
<p><a href="https://github.com/">https://github.com/</a></p>
<h2 id="what-to-read-next">What to read next</h2>
<ul>
<li>
<p>Πολύ καλή εισαγωγική παρουσίαση από τον Cisco Devnet Frontman Hank Preston από το Cisco Live On Demand Library (Cisco Live Barcelona 2020) <a href="https://www.ciscolive.com/global/on-demand-library.html?search=how%20to%20be%20a%20network%20engineer%20in%20a%20programmable%20age&amp;search.event=ciscoliveemea2020&amp;search.event=ciscoliveemea2019#/session/1564527385244001ctfJ">εδώ</a></p>
</li>
<li>
<p>Ο Daniel Dibb είναι ένας πολύ γνωστός Network Architect, μέλος του CCIE Advisory Council, ο οποίος συντηρεί ένα εξαιρετικό και βραβευμένο blog site με τίτλο <a href="https://lostintransit.se/">Lost in Transit</a></p>
<p>Ξεκίνησε φέτος μια προσπάθεια ως αρχάριος να προσεγγίσει το Network Automation και κατέγραψε την πορεία του μέχρι την απόκτηση του πρώτου του Network Automation Certification. Ξεκίνησε αρκετά επιφυλακτικά, και αυτό καταγράφεται στο πρώτο του blog, <a href="https://lostintransit.se/2020/06/02/getting-over-my-fear-of-network-automation/">εδώ</a></p>
</li>
<li>
<p>How to get started with Network Automation, by Hank Preston - <a href="https://blogs.cisco.com/developer/learning-network-automation">https://blogs.cisco.com/developer/learning-network-automation</a></p>
</li>
<li>
<p><em>A Development Team is more than the sum of its parts</em> - Ένα blog post γραμμένο από τους Γ.Θ. και Κ.Δ. σχετικά με τον τρόπο και τα οφέλη της πραγματική συνεργασίας στο Development για Network Automation Projects - <a href="https://blogs.cisco.com/developer/team-more-than-sum">https://blogs.cisco.com/developer/team-more-than-sum</a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>EEM monitor interface stats</title>
            <link>https://netautogr.github.io/posts/2020/11/eem-monitor-interface-stats/</link>
            <pubDate>Thu, 26 Nov 2020 01:28:49 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/eem-monitor-interface-stats/</guid>
            <description>The following applet is triggered whenever the transmit rate on the given interface falls below the configured threshold.
event manager applet speaker_monitor_Gi7/0/9 authorization bypass event interface name GigabitEthernet7/0/9 parameter transmit_rate_bps entry-op le entry-val 1500000 entry-type value poll-interval 120 action 1.01 syslog msg &amp;quot;------ EEM GENERATED MESSAGE ---------&amp;quot; action 1.02 syslog msg &amp;quot;----- SPEAKER RECEIVE RATE UNDER 1.5Mbps DETECTED ----&amp;quot; action 1.03 cli command &amp;quot;enable&amp;quot; action 1.05 cli command &amp;quot;configure terminal&amp;quot; action 1.</description>
            <content type="html"><![CDATA[<p>The following applet is triggered whenever the transmit rate on the given interface falls below the configured threshold.</p>
<pre><code>event manager applet speaker_monitor_Gi7/0/9 authorization bypass
event interface name GigabitEthernet7/0/9 parameter transmit_rate_bps entry-op le entry-val 1500000 entry-type value poll-interval 120
action 1.01 syslog msg &quot;------ EEM GENERATED MESSAGE ---------&quot;
action 1.02 syslog msg &quot;----- SPEAKER RECEIVE RATE UNDER 1.5Mbps DETECTED ----&quot;
action 1.03 cli command &quot;enable&quot;
action 1.05 cli command &quot;configure terminal&quot;
action 1.07 cli command &quot;interface GigabitEthernet7/0/9&quot;
action 1.08 cli command &quot;shutdown&quot;
action 1.09 wait 5
action 1.10 cli command &quot;no shutdown&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;Dante Speaker was rebooted&quot; body &quot;Dante Speaker on port GigabitEthernet7/0/9 was rebooted due to not receiving multicast audio stream.&quot;
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>EEM monitor traffic</title>
            <link>https://netautogr.github.io/posts/2020/11/eem-monitor-traffic/</link>
            <pubDate>Thu, 26 Nov 2020 01:25:46 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/eem-monitor-traffic/</guid>
            <description>The two below applets monitor Upload and Download traffic on specific interfaces. When they exceed 7Mbps for more than 180 seconds (3 minutes), it will execute the configured commands, capture the output and email it to me. Very useful for monitoring WAN links.
event manager applet wan-download_monitor authorization bypass event interface name GigabitEthernet0/1 parameter receive_rate_bps entry-op ge entry-val 7000000 entry-type increment poll-interval 180 action 1.01 syslog msg &amp;quot;------ EEM GENERATED MESSAGE ---------&amp;quot; action 1.</description>
            <content type="html"><![CDATA[<p>The two below applets monitor Upload and Download traffic on specific interfaces. When they exceed 7Mbps for more than 180 seconds (3 minutes), it will execute the configured commands, capture the output and email it to me. Very useful for monitoring WAN links.</p>
<pre><code>event manager applet wan-download_monitor authorization bypass
event interface name GigabitEthernet0/1 parameter receive_rate_bps entry-op ge entry-val 7000000 entry-type increment poll-interval 180
action 1.01 syslog msg &quot;------ EEM GENERATED MESSAGE ---------&quot;
action 1.02 syslog msg &quot;----- HIGH DOWNLOAD RATE DETECTED ----&quot;
action 1.03 cli command &quot;enable&quot;
action 1.04 set result &quot;&quot;
action 1.05 cli command &quot;show ip flow top-talkers&quot;
action 1.06 append result &quot;$_cli_result&quot;
action 1.07 cli command &quot;show interface gig 0/1&quot;
action 1.08 append result &quot;$_cli_result&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;High Download Rate Detected&quot; body &quot;Router has detected high Download rate exceeding 7 Mbps for over 4 minutes: $result&quot;
</code></pre><pre><code>event manager applet wan-upload_monitor authorization bypass
event interface name GigabitEthernet0/1 parameter transmit_rate_bps entry-op ge entry-val 7000000 entry-type increment poll-interval 180
action 1.01 syslog msg &quot;------ EEM GENERATED MESSAGE ---------&quot;
action 1.02 syslog msg &quot;----- HIGH UPLOAD RATE DETECTED ----&quot;
action 1.03 cli command &quot;enable&quot;
action 1.04 set result &quot;&quot;
action 1.05 cli command &quot;show ip flow top-talkers&quot;
action 1.06 append result &quot;$_cli_result&quot;
action 1.07 cli command &quot;show interface gig 0/1&quot;
action 1.08 append result &quot;$_cli_result&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;High Upload Rate Detected&quot; body &quot;Router has detected high Upload rate exceeding 7 Mbps for over 4 minutes: $result&quot;
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>EEM monitor environment</title>
            <link>https://netautogr.github.io/posts/2020/11/eem-monitor-environment/</link>
            <pubDate>Thu, 26 Nov 2020 01:24:34 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/eem-monitor-environment/</guid>
            <description>The following applet is triggered whenever there is a system environment message (%ENVMON) generated in the device&amp;rsquo;s syslog. E.g high temperature, failed power supply etc. As soon as EEM &amp;ldquo;sees&amp;rdquo; %ENVMON messages, it will execute the below commands, capture the output and email it to me:
event manager applet env_monitor authorization bypass event syslog pattern &amp;quot;%ENVMON&amp;quot; action 1.01 syslog msg &amp;quot;------ EEM GENERATED MESSAGE ---------&amp;quot; action 1.02 syslog msg &amp;quot;------ENVIRONMENT PROBLEM DETECTED----&amp;quot; action 1.</description>
            <content type="html"><![CDATA[<p>The following applet is triggered whenever there is a system environment message (%ENVMON) generated in the device&rsquo;s syslog. E.g high temperature, failed power supply etc. As soon as EEM &ldquo;sees&rdquo; %ENVMON messages, it will execute the below commands, capture the output and email it to me:</p>
<pre><code>event manager applet env_monitor authorization bypass
event syslog pattern &quot;%ENVMON&quot;
action 1.01 syslog msg &quot;------ EEM GENERATED MESSAGE ---------&quot;
action 1.02 syslog msg &quot;------ENVIRONMENT PROBLEM DETECTED----&quot;
action 1.03 cli command &quot;enable&quot;
action 1.04 set result &quot;&quot;
action 1.05 cli command &quot;show clock&quot;
action 1.06 append result &quot;$_cli_result&quot;
action 1.07 cli command &quot;show environment table&quot;
action 1.08 append result &quot;$_cli_result&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;Router Environmental Change Notification&quot; body &quot;$result&quot;
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>EEM monitor CPU</title>
            <link>https://netautogr.github.io/posts/2020/11/eem-monitor-cpu/</link>
            <pubDate>Thu, 26 Nov 2020 01:22:15 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/eem-monitor-cpu/</guid>
            <description>This applet monitors CPU usage. It&amp;rsquo;s extremely useful to monitor router or switch CPU usage. If the CPU usage exceeds 70% for more than 2 minutes, it will execute the commands below, capture the output and email it to me. Be mindful that the SNMP IODs might change depending on the IOS version or hardware device:
event manager applet cpu_monitor authorization bypass event snmp oid 1.3.6.1.4.1.9.9.109.1.1.1.1.3.1 get-type exact entry-op gt entry-val &amp;quot;70&amp;quot; entry-type value poll-interval 120 maxrun 20 action 1.</description>
            <content type="html"><![CDATA[<p>This applet monitors CPU usage. It&rsquo;s extremely useful to monitor router or switch CPU usage. If the CPU usage exceeds 70% for more than 2 minutes, it will execute the commands below, capture the output and email it to me. Be mindful that the SNMP IODs might change depending on the IOS version or hardware device:</p>
<pre><code>event manager applet cpu_monitor authorization bypass
event snmp oid 1.3.6.1.4.1.9.9.109.1.1.1.1.3.1 get-type exact entry-op gt entry-val &quot;70&quot; entry-type value poll-interval 120 maxrun 20
action 1.01 syslog msg &quot;------ EEM GENERATED MESSAGE ---------&quot;
action 1.02 syslog msg &quot;------HIGH CPU DETECTED----, CPU:$_snmp_oid_val %&quot;
action 1.03 cli command &quot;enable&quot;
action 1.04 set result &quot;&quot;
action 1.05 cli command &quot;show proc cpu sorted&quot;
action 1.06 append result &quot;$_cli_result&quot;
action 1.07 cli command &quot;show proc cpu history&quot;
action 1.08 append result &quot;$_cli_result&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;Router High CPU Usage Notification&quot; body &quot;$result&quot;
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>EΕΜ monitor track</title>
            <link>https://netautogr.github.io/posts/2020/11/e%CE%B5%CE%BC-monitor-track/</link>
            <pubDate>Thu, 26 Nov 2020 01:19:26 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/e%CE%B5%CE%BC-monitor-track/</guid>
            <description>This applet monitors &amp;ldquo;track 3&amp;rdquo; events which is configured to monitor a VM server via Ping. When &amp;lsquo;Track 3&amp;rsquo; is up, it will trigger this script, execute the show commands, capture the output and send them to me in an email:
event manager applet vm-2008-up authorization bypass event track 3 state up action 1.01 wait 5 action 1.02 syslog msg &amp;quot;------ IP SLA GENERATED MESSAGE ---------&amp;quot; action 1.03 syslog msg &amp;quot;------ VM-2008 Server UP ----&amp;quot; action 1.</description>
            <content type="html"><![CDATA[<p>This applet monitors &ldquo;track 3&rdquo; events which is configured to monitor a VM server via Ping. When &lsquo;Track 3&rsquo; is up, it will trigger this script, execute the show commands, capture the output and send them to me in an email:</p>
<pre><code>event manager applet vm-2008-up authorization bypass
event track 3 state up
action 1.01 wait 5
action 1.02 syslog msg &quot;------ IP SLA GENERATED MESSAGE ---------&quot;
action 1.03 syslog msg &quot;------ VM-2008 Server UP ----&quot;
action 1.04 cli command &quot;enable&quot;
action 1.05 set result &quot;&quot;
action 1.06 cli command &quot;show clock&quot;
action 1.07 append result &quot;$_cli_result&quot;
action 1.08 cli command &quot;show track 3 brief&quot;
action 1.09 append result &quot;$_cli_result&quot;
action 2 mail server &quot;$_email_server&quot; to &quot;$_email_to&quot; from &quot;$_email_from&quot; subject &quot;VM-2008 Server UP&quot; body &quot;$result&quot;
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>EEM send mail</title>
            <link>https://netautogr.github.io/posts/2020/11/eem-send-mail/</link>
            <pubDate>Thu, 26 Nov 2020 01:14:18 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/eem-send-mail/</guid>
            <description>Generic EEM script to send emails
event manager environment _email_to router-notifications@mydomain.com event manager environment _email_server 192.168.1.1 (This is your SMTP Server) event manager environment _email_from 2951@Office1 event manager environment _router_name 2951@Office1 event manager directory user policy &amp;quot;flash:/&amp;quot; courtesy of Chris Partsenidis</description>
            <content type="html"><![CDATA[<p>Generic EEM script to send emails</p>
<pre><code>event manager environment _email_to router-notifications@mydomain.com
event manager environment _email_server 192.168.1.1 (This is your SMTP Server)
event manager environment _email_from 2951@Office1
event manager environment _router_name 2951@Office1
event manager directory user policy &quot;flash:/&quot; 
</code></pre><p><em>courtesy of Chris Partsenidis</em></p>
]]></content>
        </item>
        
        <item>
            <title>Ansible</title>
            <link>https://netautogr.github.io/posts/2020/11/ansible/</link>
            <pubDate>Mon, 16 Nov 2020 14:25:30 +0200</pubDate>
            
            <guid>https://netautogr.github.io/posts/2020/11/ansible/</guid>
            <description>Η Ansible είναι ένα εργαλείο για configuration management στην λογική των Chef, Puppet και Salt. Ο βασικός λόγος της δημιουργίας της ήταν η ανάγκη για ένα agent-less automation framework και αυτό ήταν που οδήγησε στην υιοθέτησή της από μεγάλη μερίδα μηχανικών δικτύου που ήθελαν να αυτοματοποιήσουν τις εργασίες τους χωρίς όμως να έχουν την δυνατότητα εγκατάστασης agents στον εξοπλισμό τους. Παρακάτω γίνεται μια απόπειρα αποδελτίωσης των θετικών και των αρνητικών του εργαλείου ούτως ώστε η καθεμία να αποφασίσει μόνη της αν αξίζει να ασχοληθεί.</description>
            <content type="html"><![CDATA[<p>Η Ansible είναι ένα εργαλείο για configuration management στην λογική των Chef, Puppet και Salt. Ο βασικός λόγος της δημιουργίας της ήταν η ανάγκη για ένα agent-less automation framework και αυτό ήταν που οδήγησε στην υιοθέτησή της από μεγάλη μερίδα μηχανικών δικτύου που ήθελαν να αυτοματοποιήσουν τις εργασίες τους χωρίς όμως να έχουν την δυνατότητα εγκατάστασης agents στον εξοπλισμό τους.
Παρακάτω γίνεται μια απόπειρα αποδελτίωσης των θετικών και των αρνητικών του εργαλείου ούτως ώστε η καθεμία να αποφασίσει μόνη της αν αξίζει να ασχοληθεί.
TL;DR, η Ansible είναι μια καλή επιλογή για σχετικά αρχάριους στον χώρο του αυτοματισμού δικτύων με σχετικά ήπια καμπύλη εκμάθησης. Είναι επαρκής για απλές επαναλαμβανόμενες δουλειές αλλά αργή και ανίκανη να φέρει εις πέρας πολύπλοκα tasks.</p>
<h2 id="θετικά">Θετικά:</h2>
<ul>
<li><strong>Agentless</strong>: δεν απαιτείται εγκατάσταση agent στον εξοπλισμό - η σύνδεση σε δικτυακά μηχανήματα συνήθως γίνεται μέσω SSH.</li>
<li><strong>Παραλληλισμός</strong>: το ίδιο task μπορεί να τρέχει παράλληλα σε πολλαπλά hosts.</li>
<li><strong>Inventory &amp; variable inheritance</strong>: ο μηχανισμός με τον οποίο η Ansible ομαδοποιεί hosts και μοιράζεται μεταβλητές μεταξύ τους είναι πολύ ισχυρός και επεκτάσιμος. Αυτό την κάνει καλή επιλογή για πολύπλοκα περιβάλλοντα με πολλαπλά sites, prod/dev/test segments, κτλ.</li>
<li>Ecosystem: υπάρχει μεγάλος πλούτος από libraries (modules, roles, collections στην «διάλεκτο» της Ansible) που κάνουν εύκολη την δουλειά του administrator.</li>
</ul>
<h2 id="ούτε-κρύο-ούτε-ζέστη">Ούτε κρύο, ούτε ζέστη:</h2>
<ul>
<li><strong>DSL</strong>: Η Ansible «μιλάει» μια δική της γλώσσα (Domain Specific Language) που πατάει πάνω στην YAML. Από την μία, αυτό την κάνει αρκετά πιο απλή στην κατανόηση από τους ανθρώπους που δεν έχουν έκθεση σε αρχές προγραμματισμού. Από την άλλη, αυτό την κάνει αρκετά πιο περιοριστική για τους ανθρώπους που σκαμπάζουν. Επιπλέον, ένα κοινό επιχείρημα κατά των διαφόρων DSLs (Ansible, Terraform, etc) είναι πως, αντί να μαθαίνεις να γράφεις μια proper γλώσσα προγραμματισμού, μαθαίνει μια proprietary γλώσσα με de-facto περιορισμένο scope. Έκαστος εφ’ ω ετάχθη…</li>
<li><strong>Break-out to Python</strong>: Στο σημείο που ζορίζει το πράγμα και η Ansible δεν μπορεί να κάνει τα μαγκαϊβεριλίκια που θέλεις, κάνεις break-out σε Python. Τα θετικά/αρνητικά του συγκεκριμένου fact είναι άσκηση για το σπίτι…</li>
<li><strong>Delivery mechanism</strong>: Το GUI add-on (AWX) είναι ένας good-enough μηχανισμός για delivery.</li>
</ul>
<h2 id="αρνητικά-της-ansible">Αρνητικά της Ansible:</h2>
<ul>
<li><strong>SLOWWW</strong>: Είναι αργή! Ακόμη και αν φτάσεις στο σημείο να κάνεις τα πιο advanced κόλπα (forks, strategies, async) η Ansible παραμένει πολύ αργή!!!</li>
<li><strong>No event-driven mechanism</strong>: Δεν έχει μηχανισμό για event-driven automation.</li>
<li><strong>Complex tasks</strong>: Είναι απαράδεκτη για complex tasks με πολύ περιορισμένες δυνατότητες για loops, conditionals και παρόμοια structures.</li>
</ul>
]]></content>
        </item>
        
    </channel>
</rss>
